{"title":"SpringBoot","uid":"af912e0d33a827f03582ef107fe8a87d","slug":"springboot","date":"2019-01-10T11:38:48.000Z","updated":"2023-03-04T14:27:57.339Z","comments":true,"path":"api/articles/springboot.json","keywords":null,"cover":[],"content":"<h1 style=\"text-align:center\">Spring Boot</h1>\n\n<span id=\"more\"></span>\n\n<h2 id=\"1、Spring-Boot-简介\"><a href=\"#1、Spring-Boot-简介\" class=\"headerlink\" title=\"1、Spring Boot 简介\"></a>1、Spring Boot 简介</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>简化Spring应用开发的一个框架；</p>\n<p>整个Spring技术栈的一个大整合；</p>\n<p>J2EE开发的一站式解决方案；</p></blockquote>\n<h2 id=\"2、微服务\"><a href=\"#2、微服务\" class=\"headerlink\" title=\"2、微服务\"></a>2、微服务</h2><p>2014，martin fowler</p>\n<p>微服务：架构风格（服务微化）</p>\n<p>一个应用应该是一组小型服务；可以通过HTTP的方式进行互通；</p>\n<p>单体应用：ALL IN ONE</p>\n<p>微服务：每一个功能元素最终都是一个可独立替换和独立升级的软件单元；</p>\n<p><a href=\"https://martinfowler.com/articles/microservices.html#MicroservicesAndSoa\">详细参照微服务文档</a></p>\n<h2 id=\"3、环境准备\"><a href=\"#3、环境准备\" class=\"headerlink\" title=\"3、环境准备\"></a>3、环境准备</h2><p><a href=\"http://www.gulixueyuan.com/\">http://www.gulixueyuan.com/</a> 谷粒学院</p>\n<p>环境约束</p>\n<p>–jdk1.8：Spring Boot 推荐jdk1.7及以上；java version “1.8.0_112”</p>\n<p>–maven3.x：maven 3.3以上版本；Apache Maven 3.3.9</p>\n<p>–IntelliJIDEA2017：IntelliJ IDEA 2017.2.2 x64、STS</p>\n<p>–SpringBoot 1.5.9.RELEASE：1.5.9；</p>\n<p>统一环境；</p>\n<h3 id=\"1、MAVEN设置；\"><a href=\"#1、MAVEN设置；\" class=\"headerlink\" title=\"1、MAVEN设置；\"></a>1、MAVEN设置；</h3><p>给maven 的settings.xml配置文件的profiles标签添加</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;profile&gt;\n  &lt;id&gt;jdk-1.8&lt;&#x2F;id&gt;\n  &lt;activation&gt;\n    &lt;activeByDefault&gt;true&lt;&#x2F;activeByDefault&gt;\n    &lt;jdk&gt;1.8&lt;&#x2F;jdk&gt;\n  &lt;&#x2F;activation&gt;\n  &lt;properties&gt;\n    &lt;maven.compiler.source&gt;1.8&lt;&#x2F;maven.compiler.source&gt;\n    &lt;maven.compiler.target&gt;1.8&lt;&#x2F;maven.compiler.target&gt;\n    &lt;maven.compiler.compilerVersion&gt;1.8&lt;&#x2F;maven.compiler.compilerVersion&gt;\n  &lt;&#x2F;properties&gt;\n&lt;&#x2F;profile&gt;</code></pre>\n\n<h3 id=\"2、IDEA设置\"><a href=\"#2、IDEA设置\" class=\"headerlink\" title=\"2、IDEA设置\"></a>2、IDEA设置</h3><p>整合maven进来；</p>\n<p><img src=\"/post/springboot/20180129151045.png\" alt=\"idea设置\"></p>\n<p><img src=\"/post/springboot/20180129151112.png\" alt=\"springboot\"></p>\n<h2 id=\"4、Spring-Boot-HelloWorld\"><a href=\"#4、Spring-Boot-HelloWorld\" class=\"headerlink\" title=\"4、Spring Boot HelloWorld\"></a>4、Spring Boot HelloWorld</h2><p>一个功能：</p>\n<p>浏览器发送hello请求，服务器接受请求并处理，响应Hello World字符串；</p>\n<h3 id=\"1、创建一个maven工程；（jar）\"><a href=\"#1、创建一个maven工程；（jar）\" class=\"headerlink\" title=\"1、创建一个maven工程；（jar）\"></a>1、创建一个maven工程；（jar）</h3><h3 id=\"2、导入spring-boot相关的依赖\"><a href=\"#2、导入spring-boot相关的依赖\" class=\"headerlink\" title=\"2、导入spring boot相关的依赖\"></a>2、导入spring boot相关的依赖</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;parent&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;1.5.9.RELEASE&lt;&#x2F;version&gt;\n&lt;&#x2F;parent&gt;\n&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;\n    &lt;&#x2F;dependency&gt;\n&lt;&#x2F;dependencies&gt;</code></pre>\n\n<h3 id=\"3、编写一个主程序；启动Spring-Boot应用\"><a href=\"#3、编写一个主程序；启动Spring-Boot应用\" class=\"headerlink\" title=\"3、编写一个主程序；启动Spring Boot应用\"></a>3、编写一个主程序；启动Spring Boot应用</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n&#x2F;**\n *  @SpringBootApplication 来标注一个主程序类，说明这是一个Spring Boot应用\n *&#x2F;\n@SpringBootApplication\npublic class HelloWorldMainApplication &#123;\n\n    public static void main(String[] args) &#123;\n\n        &#x2F;&#x2F; Spring应用启动起来\n        SpringApplication.run(HelloWorldMainApplication.class,args);\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"4、编写相关的Controller、Service\"><a href=\"#4、编写相关的Controller、Service\" class=\"headerlink\" title=\"4、编写相关的Controller、Service\"></a>4、编写相关的Controller、Service</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Controller\npublic class HelloController &#123;\n\n    @ResponseBody\n    @RequestMapping(&quot;&#x2F;hello&quot;)\n    public String hello()&#123;\n        return &quot;Hello World!&quot;;\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<h3 id=\"5、运行主程序测试\"><a href=\"#5、运行主程序测试\" class=\"headerlink\" title=\"5、运行主程序测试\"></a>5、运行主程序测试</h3><h3 id=\"6、简化部署\"><a href=\"#6、简化部署\" class=\"headerlink\" title=\"6、简化部署\"></a>6、简化部署</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!-- 这个插件，可以将应用打包成一个可执行的jar包；--&gt;\n   &lt;build&gt;\n       &lt;plugins&gt;\n           &lt;plugin&gt;\n               &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n               &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;\n           &lt;&#x2F;plugin&gt;\n       &lt;&#x2F;plugins&gt;\n   &lt;&#x2F;build&gt;</code></pre>\n\n<p>将这个应用打成jar包，直接使用java -jar的命令进行执行；</p>\n<h2 id=\"5、Hello-World探究\"><a href=\"#5、Hello-World探究\" class=\"headerlink\" title=\"5、Hello World探究\"></a>5、Hello World探究</h2><h3 id=\"1、POM文件\"><a href=\"#1、POM文件\" class=\"headerlink\" title=\"1、POM文件\"></a>1、POM文件</h3><h4 id=\"1、父项目\"><a href=\"#1、父项目\" class=\"headerlink\" title=\"1、父项目\"></a>1、父项目</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;parent&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;1.5.9.RELEASE&lt;&#x2F;version&gt;\n&lt;&#x2F;parent&gt;\n\n他的父项目是\n&lt;parent&gt;\n  &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n  &lt;artifactId&gt;spring-boot-dependencies&lt;&#x2F;artifactId&gt;\n  &lt;version&gt;1.5.9.RELEASE&lt;&#x2F;version&gt;\n  &lt;relativePath&gt;..&#x2F;..&#x2F;spring-boot-dependencies&lt;&#x2F;relativePath&gt;\n&lt;&#x2F;parent&gt;\n他来真正管理Spring Boot应用里面的所有依赖版本；\n</code></pre>\n\n<p>Spring Boot的版本仲裁中心；</p>\n<p>以后我们导入依赖默认是不需要写版本；（没有在dependencies里面管理的依赖自然需要声明版本号）</p>\n<h4 id=\"2、启动器\"><a href=\"#2、启动器\" class=\"headerlink\" title=\"2、启动器\"></a>2、启动器</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p><strong>spring-boot-starter</strong>-&#x3D;&#x3D;web&#x3D;&#x3D;：</p>\n<p>​\tspring-boot-starter：spring-boot场景启动器；帮我们导入了web模块正常运行所依赖的组件；</p>\n<p>Spring Boot将所有的功能场景都抽取出来，做成一个个的starters（启动器），只需要在项目里面引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器</p>\n<h3 id=\"2、主程序类，主入口类\"><a href=\"#2、主程序类，主入口类\" class=\"headerlink\" title=\"2、主程序类，主入口类\"></a>2、主程序类，主入口类</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n *  @SpringBootApplication 来标注一个主程序类，说明这是一个Spring Boot应用\n *&#x2F;\n@SpringBootApplication\npublic class HelloWorldMainApplication &#123;\n\n    public static void main(String[] args) &#123;\n\n        &#x2F;&#x2F; Spring应用启动起来\n        SpringApplication.run(HelloWorldMainApplication.class,args);\n    &#125;\n&#125;\n</code></pre>\n\n<p>@<strong>SpringBootApplication</strong>:    Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(excludeFilters &#x3D; &#123;\n      @Filter(type &#x3D; FilterType.CUSTOM, classes &#x3D; TypeExcludeFilter.class),\n      @Filter(type &#x3D; FilterType.CUSTOM, classes &#x3D; AutoConfigurationExcludeFilter.class) &#125;)\npublic @interface SpringBootApplication &#123;</code></pre>\n\n<p>@<strong>SpringBootConfiguration</strong>:Spring Boot的配置类；</p>\n<p>​\t\t标注在某个类上，表示这是一个Spring Boot的配置类；</p>\n<p>​\t\t@<strong>Configuration</strong>:配置类上来标注这个注解；</p>\n<p>​\t\t\t配置类 —–  配置文件；配置类也是容器中的一个组件；@Component</p>\n<p>@<strong>EnableAutoConfiguration</strong>：开启自动配置功能；</p>\n<p>​\t\t以前我们需要配置的东西，Spring Boot帮我们自动配置；@<strong>EnableAutoConfiguration</strong>告诉SpringBoot开启自动配置功能；这样自动配置才能生效；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@AutoConfigurationPackage\n@Import(EnableAutoConfigurationImportSelector.class)\npublic @interface EnableAutoConfiguration &#123;</code></pre>\n\n<p>​      \t@<strong>AutoConfigurationPackage</strong>：自动配置包</p>\n<p>​\t\t@<strong>Import</strong>(AutoConfigurationPackages.Registrar.class)：</p>\n<p>​\t\tSpring的底层注解@Import，给容器中导入一个组件；导入的组件由AutoConfigurationPackages.Registrar.class；</p>\n<p>&#x3D;&#x3D;将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器；&#x3D;&#x3D;</p>\n<p>​\t@<strong>Import</strong>(EnableAutoConfigurationImportSelector.class)；</p>\n<p>​\t\t给容器中导入组件？</p>\n<p>​\t\t<strong>EnableAutoConfigurationImportSelector</strong>：导入哪些组件的选择器；</p>\n<p>​\t\t将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中；</p>\n<p>​\t\t会给容器中导入非常多的自动配置类（xxxAutoConfiguration）；就是给容器中导入这个场景需要的所有组件，并配置好这些组件；\t\t<img src=\"/post/springboot/20180129224104.png\" alt=\"自动配置类\"></p>\n<p>有了自动配置类，免去了我们手动编写配置注入功能组件等的工作；</p>\n<p>​\t\tSpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class,classLoader)；</p>\n<p>&#x3D;&#x3D;Spring Boot在启动的时候从类路径下的META-INF&#x2F;spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作；&#x3D;&#x3D;以前我们需要自己配置的东西，自动配置类都帮我们；</p>\n<p>J2EE的整体整合解决方案和自动配置都在spring-boot-autoconfigure-1.5.9.RELEASE.jar；</p>\n<p>​\t\t</p>\n<p>&#x3D;&#x3D;Spring注解版（谷粒学院）&#x3D;&#x3D;</p>\n<h2 id=\"6、使用Spring-Initializer快速创建Spring-Boot项目\"><a href=\"#6、使用Spring-Initializer快速创建Spring-Boot项目\" class=\"headerlink\" title=\"6、使用Spring Initializer快速创建Spring Boot项目\"></a>6、使用Spring Initializer快速创建Spring Boot项目</h2><h3 id=\"1、IDEA：使用-Spring-Initializer快速创建项目\"><a href=\"#1、IDEA：使用-Spring-Initializer快速创建项目\" class=\"headerlink\" title=\"1、IDEA：使用 Spring Initializer快速创建项目\"></a>1、IDEA：使用 Spring Initializer快速创建项目</h3><p>IDE都支持使用Spring的项目创建向导快速创建一个Spring Boot项目；</p>\n<p>选择我们需要的模块；向导会联网创建Spring Boot项目；</p>\n<p>默认生成的Spring Boot项目；</p>\n<ul>\n<li>主程序已经生成好了，我们只需要我们自己的逻辑</li>\n<li>resources文件夹中目录结构<ul>\n<li>static：保存所有的静态资源； js css  springboot；</li>\n<li>templates：保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat，默认不支持JSP页面）；可以使用模板引擎（freemarker、thymeleaf）；</li>\n<li>application.properties：Spring Boot应用的配置文件；可以修改一些默认设置；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2、STS使用-Spring-Starter-Project快速创建项目\"><a href=\"#2、STS使用-Spring-Starter-Project快速创建项目\" class=\"headerlink\" title=\"2、STS使用 Spring Starter Project快速创建项目\"></a>2、STS使用 Spring Starter Project快速创建项目</h3><hr>\n<h1 id=\"二、配置文件\"><a href=\"#二、配置文件\" class=\"headerlink\" title=\"二、配置文件\"></a>二、配置文件</h1><h2 id=\"1、配置文件\"><a href=\"#1、配置文件\" class=\"headerlink\" title=\"1、配置文件\"></a>1、配置文件</h2><p>SpringBoot使用一个全局的配置文件，配置文件名是固定的；</p>\n<p>•application.properties</p>\n<p>•application.yml</p>\n<p>配置文件的作用：修改SpringBoot自动配置的默认值；SpringBoot在底层都给我们自动配置好；</p>\n<p>YAML（YAML Ain’t Markup Language）</p>\n<p>​\tYAML  A Markup Language：是一个标记语言</p>\n<p>​\tYAML   isn’t Markup Language：不是一个标记语言；</p>\n<p>标记语言：</p>\n<p>​\t以前的配置文件；大多都使用的是  <strong>xxxx.xml</strong>文件；</p>\n<p>​\tYAML：<strong>以数据为中心</strong>，比json、xml等更适合做配置文件；</p>\n<p>​\tYAML：配置例子</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">server:\n  port: 8081</code></pre>\n\n<p>​\tXML：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;server&gt;\n\t&lt;port&gt;8081&lt;&#x2F;port&gt;\n&lt;&#x2F;server&gt;</code></pre>\n\n\n\n<h2 id=\"2、YAML语法：\"><a href=\"#2、YAML语法：\" class=\"headerlink\" title=\"2、YAML语法：\"></a>2、YAML语法：</h2><h3 id=\"1、基本语法\"><a href=\"#1、基本语法\" class=\"headerlink\" title=\"1、基本语法\"></a>1、基本语法</h3><p>k:(空格)v：表示一对键值对（空格必须有）；</p>\n<p>以<strong>空格</strong>的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">server:\n    port: 8081\n    path: &#x2F;hello</code></pre>\n\n<p>属性和值也是大小写敏感；</p>\n<h3 id=\"2、值的写法\"><a href=\"#2、值的写法\" class=\"headerlink\" title=\"2、值的写法\"></a>2、值的写法</h3><h4 id=\"字面量：普通的值（数字，字符串，布尔）\"><a href=\"#字面量：普通的值（数字，字符串，布尔）\" class=\"headerlink\" title=\"字面量：普通的值（数字，字符串，布尔）\"></a>字面量：普通的值（数字，字符串，布尔）</h4><p>​\tk: v：字面直接来写；</p>\n<p>​\t\t字符串默认不用加上单引号或者双引号；</p>\n<p>​\t\t“”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思</p>\n<p>​\t\t\t\tname:   “zhangsan \\n lisi”：输出；zhangsan 换行  lisi</p>\n<p>​\t\t‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据</p>\n<p>​\t\t\t\tname:   ‘zhangsan \\n lisi’：输出；zhangsan \\n  lisi</p>\n<h4 id=\"对象、Map（属性和值）（键值对）：\"><a href=\"#对象、Map（属性和值）（键值对）：\" class=\"headerlink\" title=\"对象、Map（属性和值）（键值对）：\"></a>对象、Map（属性和值）（键值对）：</h4><p>​\tk: v：在下一行来写对象的属性和值的关系；注意缩进</p>\n<p>​\t\t对象还是k: v的方式</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">friends:\n\t\tlastName: zhangsan\n\t\tage: 20</code></pre>\n\n<p>行内写法：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">friends: &#123;lastName: zhangsan,age: 18&#125;</code></pre>\n\n\n\n<h4 id=\"数组（List、Set）：\"><a href=\"#数组（List、Set）：\" class=\"headerlink\" title=\"数组（List、Set）：\"></a>数组（List、Set）：</h4><p>用- 值表示数组中的一个元素</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">pets:\n - cat\n - dog\n - pig</code></pre>\n\n<p>行内写法</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">pets: [cat,dog,pig]</code></pre>\n\n\n\n<h2 id=\"3、配置文件值注入\"><a href=\"#3、配置文件值注入\" class=\"headerlink\" title=\"3、配置文件值注入\"></a>3、配置文件值注入</h2><p>配置文件</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">person:\n    lastName: hello\n    age: 18\n    boss: false\n    birth: 2017&#x2F;12&#x2F;12\n    maps: &#123;k1: v1,k2: 12&#125;\n    lists:\n      - lisi\n      - zhaoliu\n    dog:\n      name: 小狗\n      age: 12</code></pre>\n\n<p>javaBean：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 将配置文件中配置的每一个属性的值，映射到这个组件中\n * @ConfigurationProperties：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；\n *      prefix &#x3D; &quot;person&quot;：配置文件中哪个下面的所有属性进行一一映射\n *\n * 只有这个组件是容器中的组件，才能容器提供的@ConfigurationProperties功能；\n *\n *&#x2F;\n@Component\n@ConfigurationProperties(prefix &#x3D; &quot;person&quot;)\npublic class Person &#123;\n\n    private String lastName;\n    private Integer age;\n    private Boolean boss;\n    private Date birth;\n\n    private Map&lt;String,Object&gt; maps;\n    private List&lt;Object&gt; lists;\n    private Dog dog;\n</code></pre>\n\n\n\n<p>我们可以导入配置文件处理器，以后编写配置就有提示了</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n\t\t\t&lt;artifactId&gt;spring-boot-configuration-processor&lt;&#x2F;artifactId&gt;\n\t\t\t&lt;optional&gt;true&lt;&#x2F;optional&gt;\n\t\t&lt;&#x2F;dependency&gt;</code></pre>\n\n<h4 id=\"1、properties配置文件在idea中默认utf-8可能会乱码\"><a href=\"#1、properties配置文件在idea中默认utf-8可能会乱码\" class=\"headerlink\" title=\"1、properties配置文件在idea中默认utf-8可能会乱码\"></a>1、properties配置文件在idea中默认utf-8可能会乱码</h4><p>调整</p>\n<p><img src=\"/post/springboot/20180130161620.png\" alt=\"idea配置乱码\"></p>\n<h4 id=\"2、-Value获取值和-ConfigurationProperties获取值比较\"><a href=\"#2、-Value获取值和-ConfigurationProperties获取值比较\" class=\"headerlink\" title=\"2、@Value获取值和@ConfigurationProperties获取值比较\"></a>2、@Value获取值和@ConfigurationProperties获取值比较</h4><table>\n<thead>\n<tr>\n<th></th>\n<th>@ConfigurationProperties</th>\n<th>@Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>功能</td>\n<td>批量注入配置文件中的属性</td>\n<td>一个个指定</td>\n</tr>\n<tr>\n<td>松散绑定（松散语法）</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>SpEL</td>\n<td>不支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>JSR303数据校验</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>复杂类型封装</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n</tbody></table>\n<p>配置文件yml还是properties他们都能获取到值；</p>\n<p>如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value；</p>\n<p>如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties；</p>\n<h4 id=\"3、配置文件注入值数据校验\"><a href=\"#3、配置文件注入值数据校验\" class=\"headerlink\" title=\"3、配置文件注入值数据校验\"></a>3、配置文件注入值数据校验</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Component\n@ConfigurationProperties(prefix &#x3D; &quot;person&quot;)\n@Validated\npublic class Person &#123;\n\n    &#x2F;**\n     * &lt;bean class&#x3D;&quot;Person&quot;&gt;\n     *      &lt;property name&#x3D;&quot;lastName&quot; value&#x3D;&quot;字面量&#x2F;$&#123;key&#125;从环境变量、配置文件中获取值&#x2F;#&#123;SpEL&#125;&quot;&gt;&lt;&#x2F;property&gt;\n     * &lt;bean&#x2F;&gt;\n     *&#x2F;\n\n   &#x2F;&#x2F;lastName必须是邮箱格式\n    @Email\n    &#x2F;&#x2F;@Value(&quot;$&#123;person.last-name&#125;&quot;)\n    private String lastName;\n    &#x2F;&#x2F;@Value(&quot;#&#123;11*2&#125;&quot;)\n    private Integer age;\n    &#x2F;&#x2F;@Value(&quot;true&quot;)\n    private Boolean boss;\n\n    private Date birth;\n    private Map&lt;String,Object&gt; maps;\n    private List&lt;Object&gt; lists;\n    private Dog dog;</code></pre>\n\n\n\n<h4 id=\"4、-PropertySource-amp-ImportResource-amp-Bean\"><a href=\"#4、-PropertySource-amp-ImportResource-amp-Bean\" class=\"headerlink\" title=\"4、@PropertySource&amp;@ImportResource&amp;@Bean\"></a>4、@PropertySource&amp;@ImportResource&amp;@Bean</h4><p>@<strong>PropertySource</strong>：加载指定的配置文件；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 将配置文件中配置的每一个属性的值，映射到这个组件中\n * @ConfigurationProperties：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；\n *      prefix &#x3D; &quot;person&quot;：配置文件中哪个下面的所有属性进行一一映射\n *\n * 只有这个组件是容器中的组件，才能容器提供的@ConfigurationProperties功能；\n *  @ConfigurationProperties(prefix &#x3D; &quot;person&quot;)默认从全局配置文件中获取值；\n *\n *&#x2F;\n@PropertySource(value &#x3D; &#123;&quot;classpath:person.properties&quot;&#125;)\n@Component\n@ConfigurationProperties(prefix &#x3D; &quot;person&quot;)\n&#x2F;&#x2F;@Validated\npublic class Person &#123;\n\n    &#x2F;**\n     * &lt;bean class&#x3D;&quot;Person&quot;&gt;\n     *      &lt;property name&#x3D;&quot;lastName&quot; value&#x3D;&quot;字面量&#x2F;$&#123;key&#125;从环境变量、配置文件中获取值&#x2F;#&#123;SpEL&#125;&quot;&gt;&lt;&#x2F;property&gt;\n     * &lt;bean&#x2F;&gt;\n     *&#x2F;\n\n   &#x2F;&#x2F;lastName必须是邮箱格式\n   &#x2F;&#x2F; @Email\n    &#x2F;&#x2F;@Value(&quot;$&#123;person.last-name&#125;&quot;)\n    private String lastName;\n    &#x2F;&#x2F;@Value(&quot;#&#123;11*2&#125;&quot;)\n    private Integer age;\n    &#x2F;&#x2F;@Value(&quot;true&quot;)\n    private Boolean boss;\n</code></pre>\n\n\n\n<p>@<strong>ImportResource</strong>：导入Spring的配置文件，让配置文件里面的内容生效；</p>\n<p>Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别；</p>\n<p>想让Spring的配置文件生效，加载进来；@<strong>ImportResource</strong>标注在一个配置类上</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@ImportResource(locations &#x3D; &#123;&quot;classpath:beans.xml&quot;&#125;)\n导入Spring的配置文件让其生效</code></pre>\n\n\n\n<p>不来编写Spring的配置文件</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;\n       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;\n\n\n    &lt;bean id&#x3D;&quot;helloService&quot; class&#x3D;&quot;com.atguigu.springboot.service.HelloService&quot;&gt;&lt;&#x2F;bean&gt;\n&lt;&#x2F;beans&gt;</code></pre>\n\n<p>SpringBoot推荐给容器中添加组件的方式；推荐使用全注解的方式</p>\n<p>1、配置类**@Configuration**——&gt;Spring配置文件</p>\n<p>2、使用**@Bean**给容器中添加组件</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * @Configuration：指明当前类是一个配置类；就是来替代之前的Spring配置文件\n *\n * 在配置文件中用&lt;bean&gt;&lt;bean&#x2F;&gt;标签添加组件\n *\n *&#x2F;\n@Configuration\npublic class MyAppConfig &#123;\n\n    &#x2F;&#x2F;将方法的返回值添加到容器中；容器中这个组件默认的id就是方法名\n    @Bean\n    public HelloService helloService02()&#123;\n        System.out.println(&quot;配置类@Bean给容器中添加组件了...&quot;);\n        return new HelloService();\n    &#125;\n&#125;</code></pre>\n\n<p>##4、配置文件占位符</p>\n<h3 id=\"1、随机数\"><a href=\"#1、随机数\" class=\"headerlink\" title=\"1、随机数\"></a>1、随机数</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$&#123;random.value&#125;、$&#123;random.int&#125;、$&#123;random.long&#125;\n$&#123;random.int(10)&#125;、$&#123;random.int[1024,65536]&#125;\n</code></pre>\n\n\n\n<h3 id=\"2、占位符获取之前配置的值，如果没有可以是用-指定默认值\"><a href=\"#2、占位符获取之前配置的值，如果没有可以是用-指定默认值\" class=\"headerlink\" title=\"2、占位符获取之前配置的值，如果没有可以是用:指定默认值\"></a>2、占位符获取之前配置的值，如果没有可以是用:指定默认值</h3><pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\">person.last-name&#x3D;张三$&#123;random.uuid&#125;\nperson.age&#x3D;$&#123;random.int&#125;\nperson.birth&#x3D;2017&#x2F;12&#x2F;15\nperson.boss&#x3D;false\nperson.maps.k1&#x3D;v1\nperson.maps.k2&#x3D;14\nperson.lists&#x3D;a,b,c\nperson.dog.name&#x3D;$&#123;person.hello:hello&#125;_dog\nperson.dog.age&#x3D;15</code></pre>\n\n\n\n<h2 id=\"5、Profile\"><a href=\"#5、Profile\" class=\"headerlink\" title=\"5、Profile\"></a>5、Profile</h2><h3 id=\"1、多Profile文件\"><a href=\"#1、多Profile文件\" class=\"headerlink\" title=\"1、多Profile文件\"></a>1、多Profile文件</h3><p>我们在主配置文件编写的时候，文件名可以是   application-{profile}.properties&#x2F;yml</p>\n<p>默认使用application.properties的配置；</p>\n<h3 id=\"2、yml支持多文档块方式\"><a href=\"#2、yml支持多文档块方式\" class=\"headerlink\" title=\"2、yml支持多文档块方式\"></a>2、yml支持多文档块方式</h3><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">\nserver:\n  port: 8081\nspring:\n  profiles:\n    active: prod\n\n---\nserver:\n  port: 8083\nspring:\n  profiles: dev\n\n\n---\n\nserver:\n  port: 8084\nspring:\n  profiles: prod  #指定属于哪个环境</code></pre>\n\n\n\n\n\n<h3 id=\"3、激活指定profile\"><a href=\"#3、激活指定profile\" class=\"headerlink\" title=\"3、激活指定profile\"></a>3、激活指定profile</h3><p>​\t1、在配置文件中指定  spring.profiles.active&#x3D;dev</p>\n<p>​\t2、命令行：</p>\n<p>​\t\tjava -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar –spring.profiles.active&#x3D;dev；</p>\n<p>​\t\t可以直接在测试的时候，配置传入命令行参数</p>\n<p>​\t3、虚拟机参数；</p>\n<p>​\t\t-Dspring.profiles.active&#x3D;dev</p>\n<h2 id=\"6、配置文件加载位置\"><a href=\"#6、配置文件加载位置\" class=\"headerlink\" title=\"6、配置文件加载位置\"></a>6、配置文件加载位置</h2><p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</p>\n<p>–file:.&#x2F;config&#x2F;</p>\n<p>–file:.&#x2F;</p>\n<p>–classpath:&#x2F;config&#x2F;</p>\n<p>–classpath:&#x2F;</p>\n<p>优先级由高到底，高优先级的配置会覆盖低优先级的配置；</p>\n<p>SpringBoot会从这四个位置全部加载主配置文件；<strong>互补配置</strong>；</p>\n<p>&#x3D;&#x3D;我们还可以通过spring.config.location来改变默认的配置文件位置&#x3D;&#x3D;</p>\n<p><strong>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用形成互补配置；</strong></p>\n<p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –spring.config.location&#x3D;G:&#x2F;application.properties</p>\n<h2 id=\"7、外部配置加载顺序\"><a href=\"#7、外部配置加载顺序\" class=\"headerlink\" title=\"7、外部配置加载顺序\"></a>7、外部配置加载顺序</h2><p><strong>&#x3D;&#x3D;SpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置&#x3D;&#x3D;</strong></p>\n<p><strong>1.命令行参数</strong></p>\n<p>所有的配置都可以在命令行上进行指定</p>\n<p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –server.port&#x3D;8087  –server.context-path&#x3D;&#x2F;abc</p>\n<p>多个配置用空格分开； –配置项&#x3D;值</p>\n<p>2.来自java:comp&#x2F;env的JNDI属性</p>\n<p>3.Java系统属性（System.getProperties()）</p>\n<p>4.操作系统环境变量</p>\n<p>5.RandomValuePropertySource配置的random.*属性值</p>\n<p>&#x3D;&#x3D;<strong>由jar包外向jar包内进行寻找；</strong>&#x3D;&#x3D;</p>\n<p>&#x3D;&#x3D;<strong>优先加载带profile</strong>&#x3D;&#x3D;</p>\n<p><strong>6.jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p>\n<p><strong>7.jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p>\n<p>&#x3D;&#x3D;<strong>再来加载不带profile</strong>&#x3D;&#x3D;</p>\n<p><strong>8.jar包外部的application.properties或application.yml(不带spring.profile)配置文件</strong></p>\n<p><strong>9.jar包内部的application.properties或application.yml(不带spring.profile)配置文件</strong></p>\n<p>10.@Configuration注解类上的@PropertySource</p>\n<p>11.通过SpringApplication.setDefaultProperties指定的默认属性</p>\n<p>所有支持的配置加载来源；</p>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#boot-features-external-config\">参考官方文档</a></p>\n<h2 id=\"8、自动配置原理\"><a href=\"#8、自动配置原理\" class=\"headerlink\" title=\"8、自动配置原理\"></a>8、自动配置原理</h2><p>配置文件到底能写什么？怎么写？自动配置原理；</p>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#common-application-properties\">配置文件能配置的属性参照</a></p>\n<h3 id=\"1、自动配置原理：\"><a href=\"#1、自动配置原理：\" class=\"headerlink\" title=\"1、自动配置原理：\"></a>1、<strong>自动配置原理：</strong></h3><p>1）、SpringBoot启动的时候加载主配置类，开启了自动配置功能 &#x3D;&#x3D;@EnableAutoConfiguration&#x3D;&#x3D;</p>\n<p><strong>2）、@EnableAutoConfiguration 作用：</strong></p>\n<ul>\n<li><p>利用EnableAutoConfigurationImportSelector给容器中导入一些组件？</p>\n</li>\n<li><p>可以查看selectImports()方法的内容；</p>\n</li>\n<li><p>List<String> configurations &#x3D; getCandidateConfigurations(annotationMetadata,      attributes);获取候选的配置</String></p>\n<ul>\n<li><p>&#96;&#96;&#96;java<br>SpringFactoriesLoader.loadFactoryNames()<br>扫描所有jar包类路径下  META-INF&#x2F;spring.factories<br>把扫描到的这些文件的内容包装成properties对象<br>从properties中获取到EnableAutoConfiguration.class类（类名）对应的值，然后把他们添加在容器中</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n    \n\n**&#x3D;&#x3D;将 类路径下  META-INF&#x2F;spring.factories 里面配置的所有EnableAutoConfiguration的值加入到了容器中；&#x3D;&#x3D;**\n\n&#96;&#96;&#96;properties\n# Auto Configure\norg.springframework.boot.autoconfigure.EnableAutoConfiguration&#x3D;\\\norg.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\\norg.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\\\norg.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\\\norg.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\\\norg.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\\\norg.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\\\norg.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\\\norg.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\\\norg.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\\\norg.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\\\norg.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\\\norg.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\\\norg.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\\\norg.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\\\norg.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.SecurityAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.SecurityFilterAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration,\\\norg.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\\\norg.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\\\norg.springframework.boot.autoconfigure.social.SocialWebAutoConfiguration,\\\norg.springframework.boot.autoconfigure.social.FacebookAutoConfiguration,\\\norg.springframework.boot.autoconfigure.social.LinkedInAutoConfiguration,\\\norg.springframework.boot.autoconfigure.social.TwitterAutoConfiguration,\\\norg.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\\\norg.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\\\norg.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\\\norg.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.WebClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration,\\\norg.springframework.boot.autoconfigure.websocket.WebSocketMessagingAutoConfiguration,\\\norg.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration</code></pre></li>\n</ul>\n</li>\n</ul>\n<p>每一个这样的  xxxAutoConfiguration类都是容器中的一个组件，都加入到容器中；用他们来做自动配置；</p>\n<p>3）、每一个自动配置类进行自动配置功能；</p>\n<p>4）、以<strong>HttpEncodingAutoConfiguration（Http编码自动配置）</strong>为例解释自动配置原理；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration   &#x2F;&#x2F;表示这是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件\n@EnableConfigurationProperties(HttpEncodingProperties.class)  &#x2F;&#x2F;启动指定类的ConfigurationProperties功能；将配置文件中对应的值和HttpEncodingProperties绑定起来；并把HttpEncodingProperties加入到ioc容器中\n\n@ConditionalOnWebApplication &#x2F;&#x2F;Spring底层@Conditional注解（Spring注解版），根据不同的条件，如果满足指定的条件，整个配置类里面的配置就会生效；    判断当前应用是否是web应用，如果是，当前配置类生效\n\n@ConditionalOnClass(CharacterEncodingFilter.class)  &#x2F;&#x2F;判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；\n\n@ConditionalOnProperty(prefix &#x3D; &quot;spring.http.encoding&quot;, value &#x3D; &quot;enabled&quot;, matchIfMissing &#x3D; true)  &#x2F;&#x2F;判断配置文件中是否存在某个配置  spring.http.encoding.enabled；如果不存在，判断也是成立的\n&#x2F;&#x2F;即使我们配置文件中不配置pring.http.encoding.enabled&#x3D;true，也是默认生效的；\npublic class HttpEncodingAutoConfiguration &#123;\n  \n  \t&#x2F;&#x2F;他已经和SpringBoot的配置文件映射了\n  \tprivate final HttpEncodingProperties properties;\n  \n   &#x2F;&#x2F;只有一个有参构造器的情况下，参数的值就会从容器中拿\n  \tpublic HttpEncodingAutoConfiguration(HttpEncodingProperties properties) &#123;\n\t\tthis.properties &#x3D; properties;\n\t&#125;\n  \n    @Bean   &#x2F;&#x2F;给容器中添加一个组件，这个组件的某些值需要从properties中获取\n\t@ConditionalOnMissingBean(CharacterEncodingFilter.class) &#x2F;&#x2F;判断容器没有这个组件？\n\tpublic CharacterEncodingFilter characterEncodingFilter() &#123;\n\t\tCharacterEncodingFilter filter &#x3D; new OrderedCharacterEncodingFilter();\n\t\tfilter.setEncoding(this.properties.getCharset().name());\n\t\tfilter.setForceRequestEncoding(this.properties.shouldForce(Type.REQUEST));\n\t\tfilter.setForceResponseEncoding(this.properties.shouldForce(Type.RESPONSE));\n\t\treturn filter;\n\t&#125;</code></pre>\n\n<p>根据当前不同的条件判断，决定这个配置类是否生效？</p>\n<p>一但这个配置类生效；这个配置类就会给容器中添加各种组件；这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；</p>\n<p>5）、所有在配置文件中能配置的属性都是在xxxxProperties类中封装者‘；配置文件能配置什么就可以参照某个功能对应的这个属性类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@ConfigurationProperties(prefix &#x3D; &quot;spring.http.encoding&quot;)  &#x2F;&#x2F;从配置文件中获取指定的值和bean的属性进行绑定\npublic class HttpEncodingProperties &#123;\n\n   public static final Charset DEFAULT_CHARSET &#x3D; Charset.forName(&quot;UTF-8&quot;);</code></pre>\n\n\n\n\n\n<p><strong>精髓：</strong></p>\n<p>​\t<strong>1）、SpringBoot启动会加载大量的自动配置类</strong></p>\n<p>​\t<strong>2）、我们看我们需要的功能有没有SpringBoot默认写好的自动配置类；</strong></p>\n<p>​\t<strong>3）、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件有，我们就不需要再来配置了）</strong></p>\n<p>​\t<strong>4）、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们就可以在配置文件中指定这些属性的值；</strong></p>\n<p>xxxxAutoConfigurartion：自动配置类；</p>\n<p>给容器中添加组件</p>\n<p>xxxxProperties:封装配置文件中相关属性；</p>\n<h3 id=\"2、细节\"><a href=\"#2、细节\" class=\"headerlink\" title=\"2、细节\"></a>2、细节</h3><h4 id=\"1、-Conditional派生注解（Spring注解版原生的-Conditional作用）\"><a href=\"#1、-Conditional派生注解（Spring注解版原生的-Conditional作用）\" class=\"headerlink\" title=\"1、@Conditional派生注解（Spring注解版原生的@Conditional作用）\"></a>1、@Conditional派生注解（Spring注解版原生的@Conditional作用）</h4><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p>\n<table>\n<thead>\n<tr>\n<th>@Conditional扩展注解</th>\n<th>作用（判断是否满足当前指定条件）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@ConditionalOnJava</td>\n<td>系统的java版本是否符合要求</td>\n</tr>\n<tr>\n<td>@ConditionalOnBean</td>\n<td>容器中存在指定Bean；</td>\n</tr>\n<tr>\n<td>@ConditionalOnMissingBean</td>\n<td>容器中不存在指定Bean；</td>\n</tr>\n<tr>\n<td>@ConditionalOnExpression</td>\n<td>满足SpEL表达式指定</td>\n</tr>\n<tr>\n<td>@ConditionalOnClass</td>\n<td>系统中有指定的类</td>\n</tr>\n<tr>\n<td>@ConditionalOnMissingClass</td>\n<td>系统中没有指定的类</td>\n</tr>\n<tr>\n<td>@ConditionalOnSingleCandidate</td>\n<td>容器中只有一个指定的Bean，或者这个Bean是首选Bean</td>\n</tr>\n<tr>\n<td>@ConditionalOnProperty</td>\n<td>系统中指定的属性是否有指定的值</td>\n</tr>\n<tr>\n<td>@ConditionalOnResource</td>\n<td>类路径下是否存在指定资源文件</td>\n</tr>\n<tr>\n<td>@ConditionalOnWebApplication</td>\n<td>当前是web环境</td>\n</tr>\n<tr>\n<td>@ConditionalOnNotWebApplication</td>\n<td>当前不是web环境</td>\n</tr>\n<tr>\n<td>@ConditionalOnJndi</td>\n<td>JNDI存在指定项</td>\n</tr>\n</tbody></table>\n<p><strong>自动配置类必须在一定的条件下才能生效；</strong></p>\n<p>我们怎么知道哪些自动配置类生效；</p>\n<p>**&#x3D;&#x3D;我们可以通过启用  debug&#x3D;true属性；来让控制台打印自动配置报告&#x3D;&#x3D;**，这样我们就可以很方便的知道哪些自动配置类生效；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\nAUTO-CONFIGURATION REPORT\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n\n\nPositive matches:（自动配置类启用的）\n-----------------\n\n   DispatcherServletAutoConfiguration matched:\n      - @ConditionalOnClass found required class &#39;org.springframework.web.servlet.DispatcherServlet&#39;; @ConditionalOnMissingClass did not find unwanted class (OnClassCondition)\n      - @ConditionalOnWebApplication (required) found StandardServletEnvironment (OnWebApplicationCondition)\n        \n    \nNegative matches:（没有启动，没有匹配成功的自动配置类）\n-----------------\n\n   ActiveMQAutoConfiguration:\n      Did not match:\n         - @ConditionalOnClass did not find required classes &#39;javax.jms.ConnectionFactory&#39;, &#39;org.apache.activemq.ActiveMQConnectionFactory&#39; (OnClassCondition)\n\n   AopAutoConfiguration:\n      Did not match:\n         - @ConditionalOnClass did not find required classes &#39;org.aspectj.lang.annotation.Aspect&#39;, &#39;org.aspectj.lang.reflect.Advice&#39; (OnClassCondition)\n        </code></pre>\n\n\n\n\n\n<h1 id=\"三、日志\"><a href=\"#三、日志\" class=\"headerlink\" title=\"三、日志\"></a>三、日志</h1><h2 id=\"1、日志框架\"><a href=\"#1、日志框架\" class=\"headerlink\" title=\"1、日志框架\"></a>1、日志框架</h2><p> 小张；开发一个大型系统；</p>\n<p>​\t\t1、System.out.println(“”)；将关键数据打印在控制台；去掉？写在一个文件？</p>\n<p>​\t\t2、框架来记录系统的一些运行时信息；日志框架 ；  zhanglogging.jar；</p>\n<p>​\t\t3、高大上的几个功能？异步模式？自动归档？xxxx？  zhanglogging-good.jar？</p>\n<p>​\t\t4、将以前框架卸下来？换上新的框架，重新修改之前相关的API；zhanglogging-prefect.jar；</p>\n<p>​\t\t5、JDBC—数据库驱动；</p>\n<p>​\t\t\t写了一个统一的接口层；日志门面（日志的一个抽象层）；logging-abstract.jar；</p>\n<p>​\t\t\t给项目中导入具体的日志实现就行了；我们之前的日志框架都是实现的抽象层；</p>\n<p><strong>市面上的日志框架；</strong></p>\n<p>JUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j….</p>\n<table>\n<thead>\n<tr>\n<th>日志门面  （日志的抽象层）</th>\n<th>日志实现</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><del>JCL（Jakarta  Commons Logging）</del>    SLF4j（Simple  Logging Facade for Java）    <strong><del>jboss-logging</del></strong></td>\n<td>Log4j  JUL（java.util.logging）  Log4j2  <strong>Logback</strong></td>\n</tr>\n</tbody></table>\n<p>左边选一个门面（抽象层）、右边来选一个实现；</p>\n<p>日志门面：  SLF4J；</p>\n<p>日志实现：Logback；</p>\n<p>SpringBoot：底层是Spring框架，Spring框架默认是用JCL；‘</p>\n<p>​\t<strong>&#x3D;&#x3D;SpringBoot选用 SLF4j和logback；&#x3D;&#x3D;</strong></p>\n<h2 id=\"2、SLF4j使用\"><a href=\"#2、SLF4j使用\" class=\"headerlink\" title=\"2、SLF4j使用\"></a>2、SLF4j使用</h2><h3 id=\"1、如何在系统中使用SLF4j-https-www-slf4j-org\"><a href=\"#1、如何在系统中使用SLF4j-https-www-slf4j-org\" class=\"headerlink\" title=\"1、如何在系统中使用SLF4j   https://www.slf4j.org\"></a>1、如何在系统中使用SLF4j   <a href=\"https://www.slf4j.org/\">https://www.slf4j.org</a></h3><p>以后开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法；</p>\n<p>给系统里面导入slf4j的jar和  logback的实现jar</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class HelloWorld &#123;\n  public static void main(String[] args) &#123;\n    Logger logger &#x3D; LoggerFactory.getLogger(HelloWorld.class);\n    logger.info(&quot;Hello World&quot;);\n  &#125;\n&#125;</code></pre>\n\n<p>图示；</p>\n<p><img src=\"/post/springboot/concrete-bindings.png\" alt=\"springboot/concrete-bindings.png\"></p>\n<p>每一个日志的实现框架都有自己的配置文件。使用slf4j以后，<strong>配置文件还是做成日志实现框架自己本身的配置文件；</strong></p>\n<h3 id=\"2、遗留问题\"><a href=\"#2、遗留问题\" class=\"headerlink\" title=\"2、遗留问题\"></a>2、遗留问题</h3><p>a（slf4j+logback）: Spring（commons-logging）、Hibernate（jboss-logging）、MyBatis、xxxx</p>\n<p>统一日志记录，即使是别的框架和我一起统一使用slf4j进行输出？</p>\n<p><img src=\"/post/springboot/legacy.png\"></p>\n<p><strong>如何让系统中所有的日志都统一到slf4j；</strong></p>\n<p>&#x3D;&#x3D;1、将系统中其他日志框架先排除出去；&#x3D;&#x3D;</p>\n<p>&#x3D;&#x3D;2、用中间包来替换原有的日志框架；&#x3D;&#x3D;</p>\n<p>&#x3D;&#x3D;3、我们导入slf4j其他的实现&#x3D;&#x3D;</p>\n<h2 id=\"3、SpringBoot日志关系\"><a href=\"#3、SpringBoot日志关系\" class=\"headerlink\" title=\"3、SpringBoot日志关系\"></a>3、SpringBoot日志关系</h2><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n\t&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n\t&lt;artifactId&gt;spring-boot-starter&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n\n\n<p>SpringBoot使用它来做日志功能；</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n\t\t&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n\t\t&lt;artifactId&gt;spring-boot-starter-logging&lt;&#x2F;artifactId&gt;\n\t&lt;&#x2F;dependency&gt;</code></pre>\n\n<p>底层依赖关系</p>\n<p><img src=\"/post/springboot/20180131220946.png\"></p>\n<p>总结：</p>\n<p>​\t1）、SpringBoot底层也是使用slf4j+logback的方式进行日志记录</p>\n<p>​\t2）、SpringBoot也把其他的日志都替换成了slf4j；</p>\n<p>​\t3）、中间替换包？</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@SuppressWarnings(&quot;rawtypes&quot;)\npublic abstract class LogFactory &#123;\n\n    static String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J &#x3D; &quot;http:&#x2F;&#x2F;www.slf4j.org&#x2F;codes.html#unsupported_operation_in_jcl_over_slf4j&quot;;\n\n    static LogFactory logFactory &#x3D; new SLF4JLogFactory();</code></pre>\n\n<p><img src=\"/post/springboot/20180131221411.png\"></p>\n<p>​\t4）、如果我们要引入其他框架？一定要把这个框架的默认日志依赖移除掉？</p>\n<p>​\t\t\tSpring框架用的是commons-logging；</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n\t&lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;\n\t&lt;artifactId&gt;spring-core&lt;&#x2F;artifactId&gt;\n\t&lt;exclusions&gt;\n\t\t&lt;exclusion&gt;\n\t\t\t&lt;groupId&gt;commons-logging&lt;&#x2F;groupId&gt;\n\t\t\t&lt;artifactId&gt;commons-logging&lt;&#x2F;artifactId&gt;\n\t\t&lt;&#x2F;exclusion&gt;\n\t&lt;&#x2F;exclusions&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p><strong>&#x3D;&#x3D;SpringBoot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志，引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉即可；&#x3D;&#x3D;</strong></p>\n<h2 id=\"4、日志使用；\"><a href=\"#4、日志使用；\" class=\"headerlink\" title=\"4、日志使用；\"></a>4、日志使用；</h2><h3 id=\"1、默认配置\"><a href=\"#1、默认配置\" class=\"headerlink\" title=\"1、默认配置\"></a>1、默认配置</h3><p>SpringBoot默认帮我们配置好了日志；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;记录器\nLogger logger &#x3D; LoggerFactory.getLogger(getClass());\n@Test\npublic void contextLoads() &#123;\n\t&#x2F;&#x2F;System.out.println();\n\n\t&#x2F;&#x2F;日志的级别；\n\t&#x2F;&#x2F;由低到高   trace&lt;debug&lt;info&lt;warn&lt;error\n\t&#x2F;&#x2F;可以调整输出的日志级别；日志就只会在这个级别以以后的高级别生效\n\tlogger.trace(&quot;这是trace日志...&quot;);\n\tlogger.debug(&quot;这是debug日志...&quot;);\n\t&#x2F;&#x2F;SpringBoot默认给我们使用的是info级别的，没有指定级别的就用SpringBoot默认规定的级别；root级别\n\tlogger.info(&quot;这是info日志...&quot;);\n\tlogger.warn(&quot;这是warn日志...&quot;);\n\tlogger.error(&quot;这是error日志...&quot;);\n\n\n&#125;</code></pre>\n\n\n\n<pre><code>    日志输出格式：\n        %d表示日期时间，\n        %thread表示线程名，\n        %-5level：级别从左显示5个字符宽度\n        %logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。 \n        %msg：日志消息，\n        %n是换行符\n    --&gt;\n    %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n\n</code></pre>\n<p>SpringBoot修改日志的默认配置</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\">logging.level.com.atguigu&#x3D;trace\n\n\n#logging.path&#x3D;\n# 不指定路径在当前项目下生成springboot.log日志\n# 可以指定完整的路径；\n#logging.file&#x3D;G:&#x2F;springboot.log\n\n# 在当前磁盘的根路径下创建spring文件夹和里面的log文件夹；使用 spring.log 作为默认文件\nlogging.path&#x3D;&#x2F;spring&#x2F;log\n\n#  在控制台输出的日志的格式\nlogging.pattern.console&#x3D;%d&#123;yyyy-MM-dd&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n\n# 指定文件中日志输出的格式\nlogging.pattern.file&#x3D;%d&#123;yyyy-MM-dd&#125; &#x3D;&#x3D;&#x3D; [%thread] &#x3D;&#x3D;&#x3D; %-5level &#x3D;&#x3D;&#x3D; %logger&#123;50&#125; &#x3D;&#x3D;&#x3D;&#x3D; %msg%n</code></pre>\n\n<table>\n<thead>\n<tr>\n<th>logging.file</th>\n<th>logging.path</th>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>(none)</td>\n<td>(none)</td>\n<td></td>\n<td>只在控制台输出</td>\n</tr>\n<tr>\n<td>指定文件名</td>\n<td>(none)</td>\n<td>my.log</td>\n<td>输出日志到my.log文件</td>\n</tr>\n<tr>\n<td>(none)</td>\n<td>指定目录</td>\n<td>&#x2F;var&#x2F;log</td>\n<td>输出到指定目录的 spring.log 文件中</td>\n</tr>\n</tbody></table>\n<h3 id=\"2、指定配置\"><a href=\"#2、指定配置\" class=\"headerlink\" title=\"2、指定配置\"></a>2、指定配置</h3><p>给类路径下放上每个日志框架自己的配置文件即可；SpringBoot就不使用他默认配置的了</p>\n<table>\n<thead>\n<tr>\n<th>Logging System</th>\n<th>Customization</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Logback</td>\n<td><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code> or <code>logback.groovy</code></td>\n</tr>\n<tr>\n<td>Log4j2</td>\n<td><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td>\n</tr>\n<tr>\n<td>JDK (Java Util Logging)</td>\n<td><code>logging.properties</code></td>\n</tr>\n</tbody></table>\n<p>logback.xml：直接就被日志框架识别了；</p>\n<p><strong>logback-spring.xml</strong>：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;springProfile name&#x3D;&quot;staging&quot;&gt;\n    &lt;!-- configuration to be enabled when the &quot;staging&quot; profile is active --&gt;\n  \t可以指定某段配置只在某个环境下生效\n&lt;&#x2F;springProfile&gt;\n</code></pre>\n\n<p>如：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;appender name&#x3D;&quot;stdout&quot; class&#x3D;&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;\n        &lt;!--\n        日志输出格式：\n\t\t\t%d表示日期时间，\n\t\t\t%thread表示线程名，\n\t\t\t%-5level：级别从左显示5个字符宽度\n\t\t\t%logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。 \n\t\t\t%msg：日志消息，\n\t\t\t%n是换行符\n        --&gt;\n        &lt;layout class&#x3D;&quot;ch.qos.logback.classic.PatternLayout&quot;&gt;\n            &lt;springProfile name&#x3D;&quot;dev&quot;&gt;\n                &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ----&gt; [%thread] ---&gt; %-5level %logger&#123;50&#125; - %msg%n&lt;&#x2F;pattern&gt;\n            &lt;&#x2F;springProfile&gt;\n            &lt;springProfile name&#x3D;&quot;!dev&quot;&gt;\n                &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; &#x3D;&#x3D;&#x3D;&#x3D; [%thread] &#x3D;&#x3D;&#x3D;&#x3D; %-5level %logger&#123;50&#125; - %msg%n&lt;&#x2F;pattern&gt;\n            &lt;&#x2F;springProfile&gt;\n        &lt;&#x2F;layout&gt;\n    &lt;&#x2F;appender&gt;</code></pre>\n\n\n\n<p>如果使用logback.xml作为日志配置文件，还要使用profile功能，会有以下错误</p>\n<p> <code>no applicable action for [springProfile]</code></p>\n<h2 id=\"5、切换日志框架\"><a href=\"#5、切换日志框架\" class=\"headerlink\" title=\"5、切换日志框架\"></a>5、切换日志框架</h2><p>可以按照slf4j的日志适配图，进行相关的切换；</p>\n<p>slf4j+log4j的方式；</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n  &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;\n  &lt;exclusions&gt;\n    &lt;exclusion&gt;\n      &lt;artifactId&gt;logback-classic&lt;&#x2F;artifactId&gt;\n      &lt;groupId&gt;ch.qos.logback&lt;&#x2F;groupId&gt;\n    &lt;&#x2F;exclusion&gt;\n    &lt;exclusion&gt;\n      &lt;artifactId&gt;log4j-over-slf4j&lt;&#x2F;artifactId&gt;\n      &lt;groupId&gt;org.slf4j&lt;&#x2F;groupId&gt;\n    &lt;&#x2F;exclusion&gt;\n  &lt;&#x2F;exclusions&gt;\n&lt;&#x2F;dependency&gt;\n\n&lt;dependency&gt;\n  &lt;groupId&gt;org.slf4j&lt;&#x2F;groupId&gt;\n  &lt;artifactId&gt;slf4j-log4j12&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;\n</code></pre>\n\n\n\n\n\n<p>切换为log4j2</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">   &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;\n            &lt;exclusions&gt;\n                &lt;exclusion&gt;\n                    &lt;artifactId&gt;spring-boot-starter-logging&lt;&#x2F;artifactId&gt;\n                    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n                &lt;&#x2F;exclusion&gt;\n            &lt;&#x2F;exclusions&gt;\n        &lt;&#x2F;dependency&gt;\n\n&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n  &lt;artifactId&gt;spring-boot-starter-log4j2&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<hr>\n<h1 id=\"四、Web开发\"><a href=\"#四、Web开发\" class=\"headerlink\" title=\"四、Web开发\"></a>四、Web开发</h1><h2 id=\"1、简介\"><a href=\"#1、简介\" class=\"headerlink\" title=\"1、简介\"></a>1、简介</h2><p>使用SpringBoot；</p>\n<p><strong>1）、创建SpringBoot应用，选中我们需要的模块；</strong></p>\n<p><strong>2）、SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来</strong></p>\n<p><strong>3）、自己编写业务代码；</strong></p>\n<p><strong>自动配置原理？</strong></p>\n<p>这个场景SpringBoot帮我们配置了什么？能不能修改？能修改哪些配置？能不能扩展？xxx</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">xxxxAutoConfiguration：帮我们给容器中自动配置组件；\nxxxxProperties:配置类来封装配置文件的内容；\n</code></pre>\n\n\n\n<h2 id=\"2、SpringBoot对静态资源的映射规则；\"><a href=\"#2、SpringBoot对静态资源的映射规则；\" class=\"headerlink\" title=\"2、SpringBoot对静态资源的映射规则；\"></a>2、SpringBoot对静态资源的映射规则；</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@ConfigurationProperties(prefix &#x3D; &quot;spring.resources&quot;, ignoreUnknownFields &#x3D; false)\npublic class ResourceProperties implements ResourceLoaderAware &#123;\n  &#x2F;&#x2F;可以设置和静态资源有关的参数，缓存时间等</code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">WebMvcAuotConfiguration：\n\t@Override\n\tpublic void addResourceHandlers(ResourceHandlerRegistry registry) &#123;\n\t\tif (!this.resourceProperties.isAddMappings()) &#123;\n\t\t\tlogger.debug(&quot;Default resource handling disabled&quot;);\n\t\t\treturn;\n\t\t&#125;\n\t\tInteger cachePeriod &#x3D; this.resourceProperties.getCachePeriod();\n\t\tif (!registry.hasMappingForPattern(&quot;&#x2F;webjars&#x2F;**&quot;)) &#123;\n\t\t\tcustomizeResourceHandlerRegistration(\n\t\t\t\t\tregistry.addResourceHandler(&quot;&#x2F;webjars&#x2F;**&quot;)\n\t\t\t\t\t\t\t.addResourceLocations(\n\t\t\t\t\t\t\t\t\t&quot;classpath:&#x2F;META-INF&#x2F;resources&#x2F;webjars&#x2F;&quot;)\n\t\t\t\t\t.setCachePeriod(cachePeriod));\n\t\t&#125;\n\t\tString staticPathPattern &#x3D; this.mvcProperties.getStaticPathPattern();\n         \t&#x2F;&#x2F;静态资源文件夹映射\n\t\tif (!registry.hasMappingForPattern(staticPathPattern)) &#123;\n\t\t\tcustomizeResourceHandlerRegistration(\n\t\t\t\t\tregistry.addResourceHandler(staticPathPattern)\n\t\t\t\t\t\t\t.addResourceLocations(\n\t\t\t\t\t\t\t\t\tthis.resourceProperties.getStaticLocations())\n\t\t\t\t\t.setCachePeriod(cachePeriod));\n\t\t&#125;\n\t&#125;\n\n       &#x2F;&#x2F;配置欢迎页映射\n\t@Bean\n\tpublic WelcomePageHandlerMapping welcomePageHandlerMapping(\n\t\t\tResourceProperties resourceProperties) &#123;\n\t\treturn new WelcomePageHandlerMapping(resourceProperties.getWelcomePage(),\n\t\t\t\tthis.mvcProperties.getStaticPathPattern());\n\t&#125;\n\n      &#x2F;&#x2F;配置喜欢的图标\n\t@Configuration\n\t@ConditionalOnProperty(value &#x3D; &quot;spring.mvc.favicon.enabled&quot;, matchIfMissing &#x3D; true)\n\tpublic static class FaviconConfiguration &#123;\n\n\t\tprivate final ResourceProperties resourceProperties;\n\n\t\tpublic FaviconConfiguration(ResourceProperties resourceProperties) &#123;\n\t\t\tthis.resourceProperties &#x3D; resourceProperties;\n\t\t&#125;\n\n\t\t@Bean\n\t\tpublic SimpleUrlHandlerMapping faviconHandlerMapping() &#123;\n\t\t\tSimpleUrlHandlerMapping mapping &#x3D; new SimpleUrlHandlerMapping();\n\t\t\tmapping.setOrder(Ordered.HIGHEST_PRECEDENCE + 1);\n             \t&#x2F;&#x2F;所有  **&#x2F;favicon.ico \n\t\t\tmapping.setUrlMap(Collections.singletonMap(&quot;**&#x2F;favicon.ico&quot;,\n\t\t\t\t\tfaviconRequestHandler()));\n\t\t\treturn mapping;\n\t\t&#125;\n\n\t\t@Bean\n\t\tpublic ResourceHttpRequestHandler faviconRequestHandler() &#123;\n\t\t\tResourceHttpRequestHandler requestHandler &#x3D; new ResourceHttpRequestHandler();\n\t\t\trequestHandler\n\t\t\t\t\t.setLocations(this.resourceProperties.getFaviconLocations());\n\t\t\treturn requestHandler;\n\t\t&#125;\n\n\t&#125;\n</code></pre>\n\n\n\n<p>&#x3D;&#x3D;1）、所有 &#x2F;webjars&#x2F;** ，都去 classpath:&#x2F;META-INF&#x2F;resources&#x2F;webjars&#x2F; 找资源；&#x3D;&#x3D;</p>\n<p>​\twebjars：以jar包的方式引入静态资源；</p>\n<p><a href=\"http://www.webjars.org/\">http://www.webjars.org/</a></p>\n<p><img src=\"/post/springboot/20180203181751.png\"></p>\n<p>localhost:8080&#x2F;webjars&#x2F;jquery&#x2F;3.3.1&#x2F;jquery.js</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!--引入jquery-webjar--&gt;在访问的时候只需要写webjars下面资源的名称即可\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;org.webjars&lt;&#x2F;groupId&gt;\n\t\t\t&lt;artifactId&gt;jquery&lt;&#x2F;artifactId&gt;\n\t\t\t&lt;version&gt;3.3.1&lt;&#x2F;version&gt;\n\t\t&lt;&#x2F;dependency&gt;</code></pre>\n\n\n\n<p>&#x3D;&#x3D;2）、”&#x2F;**” 访问当前项目的任何资源，都去（静态资源的文件夹）找映射&#x3D;&#x3D;</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&quot;classpath:&#x2F;META-INF&#x2F;resources&#x2F;&quot;, \n&quot;classpath:&#x2F;resources&#x2F;&quot;,\n&quot;classpath:&#x2F;static&#x2F;&quot;, \n&quot;classpath:&#x2F;public&#x2F;&quot; \n&quot;&#x2F;&quot;：当前项目的根路径</code></pre>\n\n<p>localhost:8080&#x2F;abc &#x3D;&#x3D;&#x3D;  去静态资源文件夹里面找abc</p>\n<p>&#x3D;&#x3D;3）、欢迎页； 静态资源文件夹下的所有index.html页面；被”&#x2F;**”映射；&#x3D;&#x3D;</p>\n<p>​\tlocalhost:8080&#x2F;   找index页面</p>\n<p>&#x3D;&#x3D;4）、所有的 **&#x2F;favicon.ico  都是在静态资源文件下找；&#x3D;&#x3D;</p>\n<h2 id=\"3、模板引擎\"><a href=\"#3、模板引擎\" class=\"headerlink\" title=\"3、模板引擎\"></a>3、模板引擎</h2><p>JSP、Velocity、Freemarker、Thymeleaf</p>\n<p><img src=\"/post/springboot/template-engine.png\"></p>\n<p>SpringBoot推荐的Thymeleaf；</p>\n<p>语法更简单，功能更强大；</p>\n<h3 id=\"1、引入thymeleaf；\"><a href=\"#1、引入thymeleaf；\" class=\"headerlink\" title=\"1、引入thymeleaf；\"></a>1、引入thymeleaf；</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n\t\t\t&lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;&#x2F;artifactId&gt;\n          \t2.1.6\n\t\t&lt;&#x2F;dependency&gt;\n切换thymeleaf版本\n&lt;properties&gt;\n\t\t&lt;thymeleaf.version&gt;3.0.9.RELEASE&lt;&#x2F;thymeleaf.version&gt;\n\t\t&lt;!-- 布局功能的支持程序  thymeleaf3主程序  layout2以上版本 --&gt;\n\t\t&lt;!-- thymeleaf2   layout1--&gt;\n\t\t&lt;thymeleaf-layout-dialect.version&gt;2.2.2&lt;&#x2F;thymeleaf-layout-dialect.version&gt;\n  &lt;&#x2F;properties&gt;</code></pre>\n\n\n\n<h3 id=\"2、Thymeleaf使用\"><a href=\"#2、Thymeleaf使用\" class=\"headerlink\" title=\"2、Thymeleaf使用\"></a>2、Thymeleaf使用</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@ConfigurationProperties(prefix &#x3D; &quot;spring.thymeleaf&quot;)\npublic class ThymeleafProperties &#123;\n\n\tprivate static final Charset DEFAULT_ENCODING &#x3D; Charset.forName(&quot;UTF-8&quot;);\n\n\tprivate static final MimeType DEFAULT_CONTENT_TYPE &#x3D; MimeType.valueOf(&quot;text&#x2F;html&quot;);\n\n\tpublic static final String DEFAULT_PREFIX &#x3D; &quot;classpath:&#x2F;templates&#x2F;&quot;;\n\n\tpublic static final String DEFAULT_SUFFIX &#x3D; &quot;.html&quot;;\n  \t&#x2F;&#x2F;</code></pre>\n\n<p>只要我们把HTML页面放在classpath:&#x2F;templates&#x2F;，thymeleaf就能自动渲染；</p>\n<p>使用：</p>\n<p>1、导入thymeleaf的名称空间</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;html lang&#x3D;&quot;en&quot; xmlns:th&#x3D;&quot;http:&#x2F;&#x2F;www.thymeleaf.org&quot;&gt;</code></pre>\n\n<p>2、使用thymeleaf语法；</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot; xmlns:th&#x3D;&quot;http:&#x2F;&#x2F;www.thymeleaf.org&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n    &lt;h1&gt;成功！&lt;&#x2F;h1&gt;\n    &lt;!--th:text 将div里面的文本内容设置为 --&gt;\n    &lt;div th:text&#x3D;&quot;$&#123;hello&#125;&quot;&gt;这是显示欢迎信息&lt;&#x2F;div&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"3、语法规则\"><a href=\"#3、语法规则\" class=\"headerlink\" title=\"3、语法规则\"></a>3、语法规则</h3><p>1）、th:text；改变当前元素里面的文本内容；</p>\n<p>​\tth：任意html属性；来替换原生属性的值</p>\n<p><img src=\"/post/springboot/2018-02-04_123955.png\"></p>\n<p>2）、表达式？</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\">Simple expressions:（表达式语法）\n    Variable Expressions: $&#123;...&#125;：获取变量值；OGNL；\n    \t\t1）、获取对象的属性、调用方法\n    \t\t2）、使用内置的基本对象：\n    \t\t\t#ctx : the context object.\n    \t\t\t#vars: the context variables.\n                #locale : the context locale.\n                #request : (only in Web Contexts) the HttpServletRequest object.\n                #response : (only in Web Contexts) the HttpServletResponse object.\n                #session : (only in Web Contexts) the HttpSession object.\n                #servletContext : (only in Web Contexts) the ServletContext object.\n                \n                $&#123;session.foo&#125;\n            3）、内置的一些工具对象：\n#execInfo : information about the template being processed.\n#messages : methods for obtaining externalized messages inside variables expressions, in the same way as they would be obtained using #&#123;…&#125; syntax.\n#uris : methods for escaping parts of URLs&#x2F;URIs\n#conversions : methods for executing the configured conversion service (if any).\n#dates : methods for java.util.Date objects: formatting, component extraction, etc.\n#calendars : analogous to #dates , but for java.util.Calendar objects.\n#numbers : methods for formatting numeric objects.\n#strings : methods for String objects: contains, startsWith, prepending&#x2F;appending, etc.\n#objects : methods for objects in general.\n#bools : methods for boolean evaluation.\n#arrays : methods for arrays.\n#lists : methods for lists.\n#sets : methods for sets.\n#maps : methods for maps.\n#aggregates : methods for creating aggregates on arrays or collections.\n#ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).\n\n    Selection Variable Expressions: *&#123;...&#125;：选择表达式：和$&#123;&#125;在功能上是一样；\n    \t补充：配合 th:object&#x3D;&quot;$&#123;session.user&#125;：\n   &lt;div th:object&#x3D;&quot;$&#123;session.user&#125;&quot;&gt;\n    &lt;p&gt;Name: &lt;span th:text&#x3D;&quot;*&#123;firstName&#125;&quot;&gt;Sebastian&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt;\n    &lt;p&gt;Surname: &lt;span th:text&#x3D;&quot;*&#123;lastName&#125;&quot;&gt;Pepper&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt;\n    &lt;p&gt;Nationality: &lt;span th:text&#x3D;&quot;*&#123;nationality&#125;&quot;&gt;Saturn&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt;\n    &lt;&#x2F;div&gt;\n    \n    Message Expressions: #&#123;...&#125;：获取国际化内容\n    Link URL Expressions: @&#123;...&#125;：定义URL；\n    \t\t@&#123;&#x2F;order&#x2F;process(execId&#x3D;$&#123;execId&#125;,execType&#x3D;&#39;FAST&#39;)&#125;\n    Fragment Expressions: ~&#123;...&#125;：片段引用表达式\n    \t\t&lt;div th:insert&#x3D;&quot;~&#123;commons :: main&#125;&quot;&gt;...&lt;&#x2F;div&gt;\n    \t\t\nLiterals（字面量）\n      Text literals: &#39;one text&#39; , &#39;Another one!&#39; ,…\n      Number literals: 0 , 34 , 3.0 , 12.3 ,…\n      Boolean literals: true , false\n      Null literal: null\n      Literal tokens: one , sometext , main ,…\nText operations:（文本操作）\n    String concatenation: +\n    Literal substitutions: |The name is $&#123;name&#125;|\nArithmetic operations:（数学运算）\n    Binary operators: + , - , * , &#x2F; , %\n    Minus sign (unary operator): -\nBoolean operations:（布尔运算）\n    Binary operators: and , or\n    Boolean negation (unary operator): ! , not\nComparisons and equality:（比较运算）\n    Comparators: &gt; , &lt; , &gt;&#x3D; , &lt;&#x3D; ( gt , lt , ge , le )\n    Equality operators: &#x3D;&#x3D; , !&#x3D; ( eq , ne )\nConditional operators:条件运算（三元运算符）\n    If-then: (if) ? (then)\n    If-then-else: (if) ? (then) : (else)\n    Default: (value) ?: (defaultvalue)\nSpecial tokens:\n    No-Operation: _ </code></pre>\n\n<h2 id=\"4、SpringMVC自动配置\"><a href=\"#4、SpringMVC自动配置\" class=\"headerlink\" title=\"4、SpringMVC自动配置\"></a>4、SpringMVC自动配置</h2><p><a href=\"https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications\">https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications</a></p>\n<h3 id=\"1-Spring-MVC-auto-configuration\"><a href=\"#1-Spring-MVC-auto-configuration\" class=\"headerlink\" title=\"1. Spring MVC auto-configuration\"></a>1. Spring MVC auto-configuration</h3><p>Spring Boot 自动配置好了SpringMVC</p>\n<p>以下是SpringBoot对SpringMVC的默认配置:<strong>&#x3D;&#x3D;（WebMvcAutoConfiguration）&#x3D;&#x3D;</strong></p>\n<ul>\n<li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p>\n<ul>\n<li>自动配置了ViewResolver（视图解析器：根据方法的返回值得到视图对象（View），视图对象决定如何渲染（转发？重定向？））</li>\n<li>ContentNegotiatingViewResolver：组合所有的视图解析器的；</li>\n<li>&#x3D;&#x3D;如何定制：我们可以自己给容器中添加一个视图解析器；自动的将其组合进来；&#x3D;&#x3D;</li>\n</ul>\n</li>\n<li><p>Support for serving static resources, including support for WebJars (see below).静态资源文件夹路径,webjars</p>\n</li>\n<li><p>Static <code>index.html</code> support. 静态首页访问</p>\n</li>\n<li><p>Custom <code>Favicon</code> support (see below).  favicon.ico</p>\n</li>\n<li><p>自动注册了 of <code>Converter</code>, <code>GenericConverter</code>, <code>Formatter</code> beans.</p>\n<ul>\n<li>Converter：转换器；  public String hello(User user)：类型转换使用Converter</li>\n<li><code>Formatter</code>  格式化器；  2017.12.17&#x3D;&#x3D;&#x3D;Date；</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Bean\n@ConditionalOnProperty(prefix &#x3D; &quot;spring.mvc&quot;, name &#x3D; &quot;date-format&quot;)&#x2F;&#x2F;在文件中配置日期格式化的规则\npublic Formatter&lt;Date&gt; dateFormatter() &#123;\n\treturn new DateFormatter(this.mvcProperties.getDateFormat());&#x2F;&#x2F;日期格式化组件\n&#125;</code></pre>\n\n<p>​\t&#x3D;&#x3D;自己添加的格式化器转换器，我们只需要放在容器中即可&#x3D;&#x3D;</p>\n<ul>\n<li><p>Support for <code>HttpMessageConverters</code> (see below).</p>\n<ul>\n<li><p>HttpMessageConverter：SpringMVC用来转换Http请求和响应的；User—Json；</p>\n</li>\n<li><p><code>HttpMessageConverters</code> 是从容器中确定；获取所有的HttpMessageConverter；</p>\n<p>&#x3D;&#x3D;自己给容器中添加HttpMessageConverter，只需要将自己的组件注册容器中（@Bean,@Component）&#x3D;&#x3D;</p>\n</li>\n</ul>\n</li>\n<li><p>Automatic registration of <code>MessageCodesResolver</code> (see below).定义错误代码生成规则</p>\n</li>\n<li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (see below).</p>\n<p>&#x3D;&#x3D;我们可以配置一个ConfigurableWebBindingInitializer来替换默认的；（添加到容器）&#x3D;&#x3D;</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">初始化WebDataBinder；\n请求数据&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;JavaBean；</code></pre></li>\n</ul>\n<p><strong>org.springframework.boot.autoconfigure.web：web的所有自动场景；</strong></p>\n<p>If you want to keep Spring Boot MVC features, and you just want to add additional <a href=\"https://docs.spring.io/spring/docs/4.3.14.RELEASE/spring-framework-reference/htmlsingle#mvc\">MVC configuration</a> (interceptors, formatters, view controllers etc.) you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurerAdapter</code>, but <strong>without</strong> <code>@EnableWebMvc</code>. If you wish to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code> or <code>ExceptionHandlerExceptionResolver</code> you can declare a <code>WebMvcRegistrationsAdapter</code> instance providing such components.</p>\n<p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>.</p>\n<h3 id=\"2、扩展SpringMVC\"><a href=\"#2、扩展SpringMVC\" class=\"headerlink\" title=\"2、扩展SpringMVC\"></a>2、扩展SpringMVC</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;mvc:view-controller path&#x3D;&quot;&#x2F;hello&quot; view-name&#x3D;&quot;success&quot;&#x2F;&gt;\n&lt;mvc:interceptors&gt;\n    &lt;mvc:interceptor&gt;\n        &lt;mvc:mapping path&#x3D;&quot;&#x2F;hello&quot;&#x2F;&gt;\n        &lt;bean&gt;&lt;&#x2F;bean&gt;\n    &lt;&#x2F;mvc:interceptor&gt;\n&lt;&#x2F;mvc:interceptors&gt;</code></pre>\n\n<p><strong>&#x3D;&#x3D;编写一个配置类（@Configuration），是WebMvcConfigurerAdapter类型；不能标注@EnableWebMvc&#x3D;&#x3D;</strong>;</p>\n<p>既保留了所有的自动配置，也能用我们扩展的配置；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能\n@Configuration\npublic class MyMvcConfig extends WebMvcConfigurerAdapter &#123;\n\n    @Override\n    public void addViewControllers(ViewControllerRegistry registry) &#123;\n       &#x2F;&#x2F; super.addViewControllers(registry);\n        &#x2F;&#x2F;浏览器发送 &#x2F;atguigu 请求来到 success\n        registry.addViewController(&quot;&#x2F;atguigu&quot;).setViewName(&quot;success&quot;);\n    &#125;\n&#125;</code></pre>\n\n<p>原理：</p>\n<p>​\t1）、WebMvcAutoConfiguration是SpringMVC的自动配置类</p>\n<p>​\t2）、在做其他自动配置时会导入；@Import(<strong>EnableWebMvcConfiguration</strong>.class)</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">   @Configuration\npublic static class EnableWebMvcConfiguration extends DelegatingWebMvcConfiguration &#123;\n     private final WebMvcConfigurerComposite configurers &#x3D; new WebMvcConfigurerComposite();\n\n &#x2F;&#x2F;从容器中获取所有的WebMvcConfigurer\n     @Autowired(required &#x3D; false)\n     public void setConfigurers(List&lt;WebMvcConfigurer&gt; configurers) &#123;\n         if (!CollectionUtils.isEmpty(configurers)) &#123;\n             this.configurers.addWebMvcConfigurers(configurers);\n           \t&#x2F;&#x2F;一个参考实现；将所有的WebMvcConfigurer相关配置都来一起调用；  \n           \t@Override\n            &#x2F;&#x2F; public void addViewControllers(ViewControllerRegistry registry) &#123;\n             &#x2F;&#x2F;    for (WebMvcConfigurer delegate : this.delegates) &#123;\n              &#x2F;&#x2F;       delegate.addViewControllers(registry);\n              &#x2F;&#x2F;   &#125;\n             &#125;\n         &#125;\n&#125;</code></pre>\n\n<p>​\t3）、容器中所有的WebMvcConfigurer都会一起起作用；</p>\n<p>​\t4）、我们的配置类也会被调用；</p>\n<p>​\t效果：SpringMVC的自动配置和我们的扩展配置都会起作用；</p>\n<h3 id=\"3、全面接管SpringMVC；\"><a href=\"#3、全面接管SpringMVC；\" class=\"headerlink\" title=\"3、全面接管SpringMVC；\"></a>3、全面接管SpringMVC；</h3><p>SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己配置；所有的SpringMVC的自动配置都失效了</p>\n<p><strong>我们需要在配置类中添加@EnableWebMvc即可；</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能\n@EnableWebMvc\n@Configuration\npublic class MyMvcConfig extends WebMvcConfigurerAdapter &#123;\n\n    @Override\n    public void addViewControllers(ViewControllerRegistry registry) &#123;\n       &#x2F;&#x2F; super.addViewControllers(registry);\n        &#x2F;&#x2F;浏览器发送 &#x2F;atguigu 请求来到 success\n        registry.addViewController(&quot;&#x2F;atguigu&quot;).setViewName(&quot;success&quot;);\n    &#125;\n&#125;</code></pre>\n\n<p>原理：</p>\n<p>为什么@EnableWebMvc自动配置就失效了；</p>\n<p>1）@EnableWebMvc的核心</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Import(DelegatingWebMvcConfiguration.class)\npublic @interface EnableWebMvc &#123;</code></pre>\n\n<p>2）、</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\npublic class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport &#123;</code></pre>\n\n<p>3）、</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\n@ConditionalOnWebApplication\n@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class,\n\t\tWebMvcConfigurerAdapter.class &#125;)\n&#x2F;&#x2F;容器中没有这个组件的时候，这个自动配置类才生效\n@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)\n@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class,\n\t\tValidationAutoConfiguration.class &#125;)\npublic class WebMvcAutoConfiguration &#123;</code></pre>\n\n<p>4）、@EnableWebMvc将WebMvcConfigurationSupport组件导入进来；</p>\n<p>5）、导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能；</p>\n<h2 id=\"5、如何修改SpringBoot的默认配置\"><a href=\"#5、如何修改SpringBoot的默认配置\" class=\"headerlink\" title=\"5、如何修改SpringBoot的默认配置\"></a>5、如何修改SpringBoot的默认配置</h2><p>模式：</p>\n<p>​\t1）、SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean、@Component）如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来；</p>\n<p>​\t2）、在SpringBoot中会有非常多的xxxConfigurer帮助我们进行扩展配置</p>\n<p>​\t3）、在SpringBoot中会有很多的xxxCustomizer帮助我们进行定制配置</p>\n<h2 id=\"6、RestfulCRUD\"><a href=\"#6、RestfulCRUD\" class=\"headerlink\" title=\"6、RestfulCRUD\"></a>6、RestfulCRUD</h2><h3 id=\"1）、默认访问首页\"><a href=\"#1）、默认访问首页\" class=\"headerlink\" title=\"1）、默认访问首页\"></a>1）、默认访问首页</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n&#x2F;&#x2F;使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能\n&#x2F;&#x2F;@EnableWebMvc   不要接管SpringMVC\n@Configuration\npublic class MyMvcConfig extends WebMvcConfigurerAdapter &#123;\n\n    @Override\n    public void addViewControllers(ViewControllerRegistry registry) &#123;\n       &#x2F;&#x2F; super.addViewControllers(registry);\n        &#x2F;&#x2F;浏览器发送 &#x2F;atguigu 请求来到 success\n        registry.addViewController(&quot;&#x2F;atguigu&quot;).setViewName(&quot;success&quot;);\n    &#125;\n\n    &#x2F;&#x2F;所有的WebMvcConfigurerAdapter组件都会一起起作用\n    @Bean &#x2F;&#x2F;将组件注册在容器\n    public WebMvcConfigurerAdapter webMvcConfigurerAdapter()&#123;\n        WebMvcConfigurerAdapter adapter &#x3D; new WebMvcConfigurerAdapter() &#123;\n            @Override\n            public void addViewControllers(ViewControllerRegistry registry) &#123;\n                registry.addViewController(&quot;&#x2F;&quot;).setViewName(&quot;login&quot;);\n                registry.addViewController(&quot;&#x2F;index.html&quot;).setViewName(&quot;login&quot;);\n            &#125;\n        &#125;;\n        return adapter;\n    &#125;\n&#125;\n</code></pre>\n\n<h3 id=\"2）、国际化\"><a href=\"#2）、国际化\" class=\"headerlink\" title=\"2）、国际化\"></a>2）、国际化</h3><p><strong>1）、编写国际化配置文件；</strong></p>\n<p>2）、使用ResourceBundleMessageSource管理国际化资源文件</p>\n<p>3）、在页面使用fmt:message取出国际化内容</p>\n<p>步骤：</p>\n<p>1）、编写国际化配置文件，抽取页面需要显示的国际化消息</p>\n<p><img src=\"/post/springboot/20180211130721.png\"></p>\n<p>2）、SpringBoot自动配置好了管理国际化资源文件的组件；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@ConfigurationProperties(prefix &#x3D; &quot;spring.messages&quot;)\npublic class MessageSourceAutoConfiguration &#123;\n    \n    &#x2F;**\n\t * Comma-separated list of basenames (essentially a fully-qualified classpath\n\t * location), each following the ResourceBundle convention with relaxed support for\n\t * slash based locations. If it doesn&#39;t contain a package qualifier (such as\n\t * &quot;org.mypackage&quot;), it will be resolved from the classpath root.\n\t *&#x2F;\n\tprivate String basename &#x3D; &quot;messages&quot;;  \n    &#x2F;&#x2F;我们的配置文件可以直接放在类路径下叫messages.properties；\n    \n    @Bean\n\tpublic MessageSource messageSource() &#123;\n\t\tResourceBundleMessageSource messageSource &#x3D; new ResourceBundleMessageSource();\n\t\tif (StringUtils.hasText(this.basename)) &#123;\n            &#x2F;&#x2F;设置国际化资源文件的基础名（去掉语言国家代码的）\n\t\t\tmessageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(\n\t\t\t\t\tStringUtils.trimAllWhitespace(this.basename)));\n\t\t&#125;\n\t\tif (this.encoding !&#x3D; null) &#123;\n\t\t\tmessageSource.setDefaultEncoding(this.encoding.name());\n\t\t&#125;\n\t\tmessageSource.setFallbackToSystemLocale(this.fallbackToSystemLocale);\n\t\tmessageSource.setCacheSeconds(this.cacheSeconds);\n\t\tmessageSource.setAlwaysUseMessageFormat(this.alwaysUseMessageFormat);\n\t\treturn messageSource;\n\t&#125;</code></pre>\n\n\n\n<p>3）、去页面获取国际化的值；</p>\n<p><img src=\"/post/springboot/20180211134506.png\"></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;  xmlns:th&#x3D;&quot;http:&#x2F;&#x2F;www.thymeleaf.org&quot;&gt;\n\t&lt;head&gt;\n\t\t&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;&gt;\n\t\t&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1, shrink-to-fit&#x3D;no&quot;&gt;\n\t\t&lt;meta name&#x3D;&quot;description&quot; content&#x3D;&quot;&quot;&gt;\n\t\t&lt;meta name&#x3D;&quot;author&quot; content&#x3D;&quot;&quot;&gt;\n\t\t&lt;title&gt;Signin Template for Bootstrap&lt;&#x2F;title&gt;\n\t\t&lt;!-- Bootstrap core CSS --&gt;\n\t\t&lt;link href&#x3D;&quot;asserts&#x2F;css&#x2F;bootstrap.min.css&quot; th:href&#x3D;&quot;@&#123;&#x2F;webjars&#x2F;bootstrap&#x2F;4.0.0&#x2F;css&#x2F;bootstrap.css&#125;&quot; rel&#x3D;&quot;stylesheet&quot;&gt;\n\t\t&lt;!-- Custom styles for this template --&gt;\n\t\t&lt;link href&#x3D;&quot;asserts&#x2F;css&#x2F;signin.css&quot; th:href&#x3D;&quot;@&#123;&#x2F;asserts&#x2F;css&#x2F;signin.css&#125;&quot; rel&#x3D;&quot;stylesheet&quot;&gt;\n\t&lt;&#x2F;head&gt;\n\n\t&lt;body class&#x3D;&quot;text-center&quot;&gt;\n\t\t&lt;form class&#x3D;&quot;form-signin&quot; action&#x3D;&quot;dashboard.html&quot;&gt;\n\t\t\t&lt;img class&#x3D;&quot;mb-4&quot; th:src&#x3D;&quot;@&#123;&#x2F;asserts&#x2F;img&#x2F;bootstrap-solid.svg&#125;&quot; src&#x3D;&quot;asserts&#x2F;img&#x2F;bootstrap-solid.svg&quot; alt&#x3D;&quot;&quot; width&#x3D;&quot;72&quot; height&#x3D;&quot;72&quot;&gt;\n\t\t\t&lt;h1 class&#x3D;&quot;h3 mb-3 font-weight-normal&quot; th:text&#x3D;&quot;#&#123;login.tip&#125;&quot;&gt;Please sign in&lt;&#x2F;h1&gt;\n\t\t\t&lt;label class&#x3D;&quot;sr-only&quot; th:text&#x3D;&quot;#&#123;login.username&#125;&quot;&gt;Username&lt;&#x2F;label&gt;\n\t\t\t&lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; placeholder&#x3D;&quot;Username&quot; th:placeholder&#x3D;&quot;#&#123;login.username&#125;&quot; required&#x3D;&quot;&quot; autofocus&#x3D;&quot;&quot;&gt;\n\t\t\t&lt;label class&#x3D;&quot;sr-only&quot; th:text&#x3D;&quot;#&#123;login.password&#125;&quot;&gt;Password&lt;&#x2F;label&gt;\n\t\t\t&lt;input type&#x3D;&quot;password&quot; class&#x3D;&quot;form-control&quot; placeholder&#x3D;&quot;Password&quot; th:placeholder&#x3D;&quot;#&#123;login.password&#125;&quot; required&#x3D;&quot;&quot;&gt;\n\t\t\t&lt;div class&#x3D;&quot;checkbox mb-3&quot;&gt;\n\t\t\t\t&lt;label&gt;\n          \t\t&lt;input type&#x3D;&quot;checkbox&quot; value&#x3D;&quot;remember-me&quot;&#x2F;&gt; [[#&#123;login.remember&#125;]]\n        &lt;&#x2F;label&gt;\n\t\t\t&lt;&#x2F;div&gt;\n\t\t\t&lt;button class&#x3D;&quot;btn btn-lg btn-primary btn-block&quot; type&#x3D;&quot;submit&quot; th:text&#x3D;&quot;#&#123;login.btn&#125;&quot;&gt;Sign in&lt;&#x2F;button&gt;\n\t\t\t&lt;p class&#x3D;&quot;mt-5 mb-3 text-muted&quot;&gt;© 2017-2018&lt;&#x2F;p&gt;\n\t\t\t&lt;a class&#x3D;&quot;btn btn-sm&quot;&gt;中文&lt;&#x2F;a&gt;\n\t\t\t&lt;a class&#x3D;&quot;btn btn-sm&quot;&gt;English&lt;&#x2F;a&gt;\n\t\t&lt;&#x2F;form&gt;\n\n\t&lt;&#x2F;body&gt;\n\n&lt;&#x2F;html&gt;</code></pre>\n\n<p>效果：根据浏览器语言设置的信息切换了国际化；</p>\n<p>原理：</p>\n<p>​\t国际化Locale（区域信息对象）；LocaleResolver（获取区域信息对象）；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnProperty(prefix &#x3D; &quot;spring.mvc&quot;, name &#x3D; &quot;locale&quot;)\n\t\tpublic LocaleResolver localeResolver() &#123;\n\t\t\tif (this.mvcProperties\n\t\t\t\t\t.getLocaleResolver() &#x3D;&#x3D; WebMvcProperties.LocaleResolver.FIXED) &#123;\n\t\t\t\treturn new FixedLocaleResolver(this.mvcProperties.getLocale());\n\t\t\t&#125;\n\t\t\tAcceptHeaderLocaleResolver localeResolver &#x3D; new AcceptHeaderLocaleResolver();\n\t\t\tlocaleResolver.setDefaultLocale(this.mvcProperties.getLocale());\n\t\t\treturn localeResolver;\n\t\t&#125;\n默认的就是根据请求头带来的区域信息获取Locale进行国际化</code></pre>\n\n<p>4）、点击链接切换国际化</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 可以在连接上携带区域信息\n *&#x2F;\npublic class MyLocaleResolver implements LocaleResolver &#123;\n    \n    @Override\n    public Locale resolveLocale(HttpServletRequest request) &#123;\n        String l &#x3D; request.getParameter(&quot;l&quot;);\n        Locale locale &#x3D; Locale.getDefault();\n        if(!StringUtils.isEmpty(l))&#123;\n            String[] split &#x3D; l.split(&quot;_&quot;);\n            locale &#x3D; new Locale(split[0],split[1]);\n        &#125;\n        return locale;\n    &#125;\n\n    @Override\n    public void setLocale(HttpServletRequest request, HttpServletResponse response, Locale locale) &#123;\n\n    &#125;\n&#125;\n\n\n @Bean\n    public LocaleResolver localeResolver()&#123;\n        return new MyLocaleResolver();\n    &#125;\n&#125;\n\n</code></pre>\n\n<h3 id=\"3）、登陆\"><a href=\"#3）、登陆\" class=\"headerlink\" title=\"3）、登陆\"></a>3）、登陆</h3><p>开发期间模板引擎页面修改以后，要实时生效</p>\n<p>1）、禁用模板引擎的缓存</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 禁用缓存\nspring.thymeleaf.cache&#x3D;false </code></pre>\n\n<p>2）、页面修改完成以后ctrl+f9：重新编译；</p>\n<p>登陆错误消息的显示</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;p style&#x3D;&quot;color: red&quot; th:text&#x3D;&quot;$&#123;msg&#125;&quot; th:if&#x3D;&quot;$&#123;not #strings.isEmpty(msg)&#125;&quot;&gt;&lt;&#x2F;p&gt;</code></pre>\n\n\n\n<h3 id=\"4）、拦截器进行登陆检查\"><a href=\"#4）、拦截器进行登陆检查\" class=\"headerlink\" title=\"4）、拦截器进行登陆检查\"></a>4）、拦截器进行登陆检查</h3><p>拦截器</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n&#x2F;**\n * 登陆检查，\n *&#x2F;\npublic class LoginHandlerInterceptor implements HandlerInterceptor &#123;\n    &#x2F;&#x2F;目标方法执行之前\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;\n        Object user &#x3D; request.getSession().getAttribute(&quot;loginUser&quot;);\n        if(user &#x3D;&#x3D; null)&#123;\n            &#x2F;&#x2F;未登陆，返回登陆页面\n            request.setAttribute(&quot;msg&quot;,&quot;没有权限请先登陆&quot;);\n            request.getRequestDispatcher(&quot;&#x2F;index.html&quot;).forward(request,response);\n            return false;\n        &#125;else&#123;\n            &#x2F;&#x2F;已登陆，放行请求\n            return true;\n        &#125;\n\n    &#125;\n\n    @Override\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;\n\n    &#125;\n\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;\n\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<p>注册拦截器</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;所有的WebMvcConfigurerAdapter组件都会一起起作用\n  @Bean &#x2F;&#x2F;将组件注册在容器\n  public WebMvcConfigurerAdapter webMvcConfigurerAdapter()&#123;\n      WebMvcConfigurerAdapter adapter &#x3D; new WebMvcConfigurerAdapter() &#123;\n          @Override\n          public void addViewControllers(ViewControllerRegistry registry) &#123;\n              registry.addViewController(&quot;&#x2F;&quot;).setViewName(&quot;login&quot;);\n              registry.addViewController(&quot;&#x2F;index.html&quot;).setViewName(&quot;login&quot;);\n              registry.addViewController(&quot;&#x2F;main.html&quot;).setViewName(&quot;dashboard&quot;);\n          &#125;\n\n          &#x2F;&#x2F;注册拦截器\n          @Override\n          public void addInterceptors(InterceptorRegistry registry) &#123;\n              &#x2F;&#x2F;super.addInterceptors(registry);\n              &#x2F;&#x2F;静态资源；  *.css , *.js\n              &#x2F;&#x2F;SpringBoot已经做好了静态资源映射\n              registry.addInterceptor(new LoginHandlerInterceptor()).addPathPatterns(&quot;&#x2F;**&quot;)\n                      .excludePathPatterns(&quot;&#x2F;index.html&quot;,&quot;&#x2F;&quot;,&quot;&#x2F;user&#x2F;login&quot;);\n          &#125;\n      &#125;;\n      return adapter;\n  &#125;</code></pre>\n\n<h3 id=\"5）、CRUD-员工列表\"><a href=\"#5）、CRUD-员工列表\" class=\"headerlink\" title=\"5）、CRUD-员工列表\"></a>5）、CRUD-员工列表</h3><p>实验要求：</p>\n<p>1）、RestfulCRUD：CRUD满足Rest风格；</p>\n<p>URI：  &#x2F;资源名称&#x2F;资源标识       HTTP请求方式区分对资源CRUD操作</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>普通CRUD（uri来区分操作）</th>\n<th>RestfulCRUD</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>查询</td>\n<td>getEmp</td>\n<td>emp—GET</td>\n</tr>\n<tr>\n<td>添加</td>\n<td>addEmp?xxx</td>\n<td>emp—POST</td>\n</tr>\n<tr>\n<td>修改</td>\n<td>updateEmp?id&#x3D;xxx&amp;xxx&#x3D;xx</td>\n<td>emp&#x2F;{id}—PUT</td>\n</tr>\n<tr>\n<td>删除</td>\n<td>deleteEmp?id&#x3D;1</td>\n<td>emp&#x2F;{id}—DELETE</td>\n</tr>\n</tbody></table>\n<p>2）、实验的请求架构;</p>\n<table>\n<thead>\n<tr>\n<th>实验功能</th>\n<th>请求URI</th>\n<th>请求方式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>查询所有员工</td>\n<td>emps</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>查询某个员工(来到修改页面)</td>\n<td>emp&#x2F;1</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>来到添加页面</td>\n<td>emp</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>添加员工</td>\n<td>emp</td>\n<td>POST</td>\n</tr>\n<tr>\n<td>来到修改页面（查出员工进行信息回显）</td>\n<td>emp&#x2F;1</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>修改员工</td>\n<td>emp</td>\n<td>PUT</td>\n</tr>\n<tr>\n<td>删除员工</td>\n<td>emp&#x2F;1</td>\n<td>DELETE</td>\n</tr>\n</tbody></table>\n<p>3）、员工列表：</p>\n<h4 id=\"thymeleaf公共页面元素抽取\"><a href=\"#thymeleaf公共页面元素抽取\" class=\"headerlink\" title=\"thymeleaf公共页面元素抽取\"></a>thymeleaf公共页面元素抽取</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">1、抽取公共片段\n&lt;div th:fragment&#x3D;&quot;copy&quot;&gt;\n&amp;copy; 2011 The Good Thymes Virtual Grocery\n&lt;&#x2F;div&gt;\n\n2、引入公共片段\n&lt;div th:insert&#x3D;&quot;~&#123;footer :: copy&#125;&quot;&gt;&lt;&#x2F;div&gt;\n~&#123;templatename::selector&#125;：模板名::选择器\n~&#123;templatename::fragmentname&#125;:模板名::片段名\n\n3、默认效果：\ninsert的公共片段在div标签中\n如果使用th:insert等属性进行引入，可以不用写~&#123;&#125;：\n行内写法可以加上：[[~&#123;&#125;]];[(~&#123;&#125;)]；</code></pre>\n\n\n\n<p>三种引入公共片段的th属性：</p>\n<p><strong>th:insert</strong>：将公共片段整个插入到声明引入的元素中</p>\n<p><strong>th:replace</strong>：将声明引入的元素替换为公共片段</p>\n<p><strong>th:include</strong>：将被引入的片段的内容包含进这个标签中</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;footer th:fragment&#x3D;&quot;copy&quot;&gt;\n&amp;copy; 2011 The Good Thymes Virtual Grocery\n&lt;&#x2F;footer&gt;\n\n引入方式\n&lt;div th:insert&#x3D;&quot;footer :: copy&quot;&gt;&lt;&#x2F;div&gt;\n&lt;div th:replace&#x3D;&quot;footer :: copy&quot;&gt;&lt;&#x2F;div&gt;\n&lt;div th:include&#x3D;&quot;footer :: copy&quot;&gt;&lt;&#x2F;div&gt;\n\n效果\n&lt;div&gt;\n    &lt;footer&gt;\n    &amp;copy; 2011 The Good Thymes Virtual Grocery\n    &lt;&#x2F;footer&gt;\n&lt;&#x2F;div&gt;\n\n&lt;footer&gt;\n&amp;copy; 2011 The Good Thymes Virtual Grocery\n&lt;&#x2F;footer&gt;\n\n&lt;div&gt;\n&amp;copy; 2011 The Good Thymes Virtual Grocery\n&lt;&#x2F;div&gt;</code></pre>\n\n\n\n<p>引入片段的时候传入参数： </p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">\n&lt;nav class&#x3D;&quot;col-md-2 d-none d-md-block bg-light sidebar&quot; id&#x3D;&quot;sidebar&quot;&gt;\n    &lt;div class&#x3D;&quot;sidebar-sticky&quot;&gt;\n        &lt;ul class&#x3D;&quot;nav flex-column&quot;&gt;\n            &lt;li class&#x3D;&quot;nav-item&quot;&gt;\n                &lt;a class&#x3D;&quot;nav-link active&quot;\n                   th:class&#x3D;&quot;$&#123;activeUri&#x3D;&#x3D;&#39;main.html&#39;?&#39;nav-link active&#39;:&#39;nav-link&#39;&#125;&quot;\n                   href&#x3D;&quot;#&quot; th:href&#x3D;&quot;@&#123;&#x2F;main.html&#125;&quot;&gt;\n                    &lt;svg xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; width&#x3D;&quot;24&quot; height&#x3D;&quot;24&quot; viewBox&#x3D;&quot;0 0 24 24&quot; fill&#x3D;&quot;none&quot; stroke&#x3D;&quot;currentColor&quot; stroke-width&#x3D;&quot;2&quot; stroke-linecap&#x3D;&quot;round&quot; stroke-linejoin&#x3D;&quot;round&quot; class&#x3D;&quot;feather feather-home&quot;&gt;\n                        &lt;path d&#x3D;&quot;M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z&quot;&gt;&lt;&#x2F;path&gt;\n                        &lt;polyline points&#x3D;&quot;9 22 9 12 15 12 15 22&quot;&gt;&lt;&#x2F;polyline&gt;\n                    &lt;&#x2F;svg&gt;\n                    Dashboard &lt;span class&#x3D;&quot;sr-only&quot;&gt;(current)&lt;&#x2F;span&gt;\n                &lt;&#x2F;a&gt;\n            &lt;&#x2F;li&gt;\n\n&lt;!--引入侧边栏;传入参数--&gt;\n&lt;div th:replace&#x3D;&quot;commons&#x2F;bar::#sidebar(activeUri&#x3D;&#39;emps&#39;)&quot;&gt;&lt;&#x2F;div&gt;</code></pre>\n\n<h3 id=\"6）、CRUD-员工添加\"><a href=\"#6）、CRUD-员工添加\" class=\"headerlink\" title=\"6）、CRUD-员工添加\"></a>6）、CRUD-员工添加</h3><p>添加页面</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;form&gt;\n    &lt;div class&#x3D;&quot;form-group&quot;&gt;\n        &lt;label&gt;LastName&lt;&#x2F;label&gt;\n        &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; placeholder&#x3D;&quot;zhangsan&quot;&gt;\n    &lt;&#x2F;div&gt;\n    &lt;div class&#x3D;&quot;form-group&quot;&gt;\n        &lt;label&gt;Email&lt;&#x2F;label&gt;\n        &lt;input type&#x3D;&quot;email&quot; class&#x3D;&quot;form-control&quot; placeholder&#x3D;&quot;zhangsan@atguigu.com&quot;&gt;\n    &lt;&#x2F;div&gt;\n    &lt;div class&#x3D;&quot;form-group&quot;&gt;\n        &lt;label&gt;Gender&lt;&#x2F;label&gt;&lt;br&#x2F;&gt;\n        &lt;div class&#x3D;&quot;form-check form-check-inline&quot;&gt;\n            &lt;input class&#x3D;&quot;form-check-input&quot; type&#x3D;&quot;radio&quot; name&#x3D;&quot;gender&quot;  value&#x3D;&quot;1&quot;&gt;\n            &lt;label class&#x3D;&quot;form-check-label&quot;&gt;男&lt;&#x2F;label&gt;\n        &lt;&#x2F;div&gt;\n        &lt;div class&#x3D;&quot;form-check form-check-inline&quot;&gt;\n            &lt;input class&#x3D;&quot;form-check-input&quot; type&#x3D;&quot;radio&quot; name&#x3D;&quot;gender&quot;  value&#x3D;&quot;0&quot;&gt;\n            &lt;label class&#x3D;&quot;form-check-label&quot;&gt;女&lt;&#x2F;label&gt;\n        &lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n    &lt;div class&#x3D;&quot;form-group&quot;&gt;\n        &lt;label&gt;department&lt;&#x2F;label&gt;\n        &lt;select class&#x3D;&quot;form-control&quot;&gt;\n            &lt;option&gt;1&lt;&#x2F;option&gt;\n            &lt;option&gt;2&lt;&#x2F;option&gt;\n            &lt;option&gt;3&lt;&#x2F;option&gt;\n            &lt;option&gt;4&lt;&#x2F;option&gt;\n            &lt;option&gt;5&lt;&#x2F;option&gt;\n        &lt;&#x2F;select&gt;\n    &lt;&#x2F;div&gt;\n    &lt;div class&#x3D;&quot;form-group&quot;&gt;\n        &lt;label&gt;Birth&lt;&#x2F;label&gt;\n        &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; placeholder&#x3D;&quot;zhangsan&quot;&gt;\n    &lt;&#x2F;div&gt;\n    &lt;button type&#x3D;&quot;submit&quot; class&#x3D;&quot;btn btn-primary&quot;&gt;添加&lt;&#x2F;button&gt;\n&lt;&#x2F;form&gt;</code></pre>\n\n<p>提交的数据格式不对：生日：日期；</p>\n<p>2017-12-12；2017&#x2F;12&#x2F;12；2017.12.12；</p>\n<p>日期的格式化；SpringMVC将页面提交的值需要转换为指定的类型;</p>\n<p>2017-12-12—Date； 类型转换，格式化;</p>\n<p>默认日期是按照&#x2F;的方式；</p>\n<h3 id=\"7）、CRUD-员工修改\"><a href=\"#7）、CRUD-员工修改\" class=\"headerlink\" title=\"7）、CRUD-员工修改\"></a>7）、CRUD-员工修改</h3><p>修改添加二合一表单</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!--需要区分是员工修改还是添加；--&gt;\n&lt;form th:action&#x3D;&quot;@&#123;&#x2F;emp&#125;&quot; method&#x3D;&quot;post&quot;&gt;\n    &lt;!--发送put请求修改员工数据--&gt;\n    &lt;!--\n1、SpringMVC中配置HiddenHttpMethodFilter;（SpringBoot自动配置好的）\n2、页面创建一个post表单\n3、创建一个input项，name&#x3D;&quot;_method&quot;;值就是我们指定的请求方式\n--&gt;\n    &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;_method&quot; value&#x3D;&quot;put&quot; th:if&#x3D;&quot;$&#123;emp!&#x3D;null&#125;&quot;&#x2F;&gt;\n    &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;id&quot; th:if&#x3D;&quot;$&#123;emp!&#x3D;null&#125;&quot; th:value&#x3D;&quot;$&#123;emp.id&#125;&quot;&gt;\n    &lt;div class&#x3D;&quot;form-group&quot;&gt;\n        &lt;label&gt;LastName&lt;&#x2F;label&gt;\n        &lt;input name&#x3D;&quot;lastName&quot; type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; placeholder&#x3D;&quot;zhangsan&quot; th:value&#x3D;&quot;$&#123;emp!&#x3D;null&#125;?$&#123;emp.lastName&#125;&quot;&gt;\n    &lt;&#x2F;div&gt;\n    &lt;div class&#x3D;&quot;form-group&quot;&gt;\n        &lt;label&gt;Email&lt;&#x2F;label&gt;\n        &lt;input name&#x3D;&quot;email&quot; type&#x3D;&quot;email&quot; class&#x3D;&quot;form-control&quot; placeholder&#x3D;&quot;zhangsan@atguigu.com&quot; th:value&#x3D;&quot;$&#123;emp!&#x3D;null&#125;?$&#123;emp.email&#125;&quot;&gt;\n    &lt;&#x2F;div&gt;\n    &lt;div class&#x3D;&quot;form-group&quot;&gt;\n        &lt;label&gt;Gender&lt;&#x2F;label&gt;&lt;br&#x2F;&gt;\n        &lt;div class&#x3D;&quot;form-check form-check-inline&quot;&gt;\n            &lt;input class&#x3D;&quot;form-check-input&quot; type&#x3D;&quot;radio&quot; name&#x3D;&quot;gender&quot; value&#x3D;&quot;1&quot; th:checked&#x3D;&quot;$&#123;emp!&#x3D;null&#125;?$&#123;emp.gender&#x3D;&#x3D;1&#125;&quot;&gt;\n            &lt;label class&#x3D;&quot;form-check-label&quot;&gt;男&lt;&#x2F;label&gt;\n        &lt;&#x2F;div&gt;\n        &lt;div class&#x3D;&quot;form-check form-check-inline&quot;&gt;\n            &lt;input class&#x3D;&quot;form-check-input&quot; type&#x3D;&quot;radio&quot; name&#x3D;&quot;gender&quot; value&#x3D;&quot;0&quot; th:checked&#x3D;&quot;$&#123;emp!&#x3D;null&#125;?$&#123;emp.gender&#x3D;&#x3D;0&#125;&quot;&gt;\n            &lt;label class&#x3D;&quot;form-check-label&quot;&gt;女&lt;&#x2F;label&gt;\n        &lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n    &lt;div class&#x3D;&quot;form-group&quot;&gt;\n        &lt;label&gt;department&lt;&#x2F;label&gt;\n        &lt;!--提交的是部门的id--&gt;\n        &lt;select class&#x3D;&quot;form-control&quot; name&#x3D;&quot;department.id&quot;&gt;\n            &lt;option th:selected&#x3D;&quot;$&#123;emp!&#x3D;null&#125;?$&#123;dept.id &#x3D;&#x3D; emp.department.id&#125;&quot; th:value&#x3D;&quot;$&#123;dept.id&#125;&quot; th:each&#x3D;&quot;dept:$&#123;depts&#125;&quot; th:text&#x3D;&quot;$&#123;dept.departmentName&#125;&quot;&gt;1&lt;&#x2F;option&gt;\n        &lt;&#x2F;select&gt;\n    &lt;&#x2F;div&gt;\n    &lt;div class&#x3D;&quot;form-group&quot;&gt;\n        &lt;label&gt;Birth&lt;&#x2F;label&gt;\n        &lt;input name&#x3D;&quot;birth&quot; type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; placeholder&#x3D;&quot;zhangsan&quot; th:value&#x3D;&quot;$&#123;emp!&#x3D;null&#125;?$&#123;#dates.format(emp.birth, &#39;yyyy-MM-dd HH:mm&#39;)&#125;&quot;&gt;\n    &lt;&#x2F;div&gt;\n    &lt;button type&#x3D;&quot;submit&quot; class&#x3D;&quot;btn btn-primary&quot; th:text&#x3D;&quot;$&#123;emp!&#x3D;null&#125;?&#39;修改&#39;:&#39;添加&#39;&quot;&gt;添加&lt;&#x2F;button&gt;\n&lt;&#x2F;form&gt;</code></pre>\n\n<h3 id=\"8）、CRUD-员工删除\"><a href=\"#8）、CRUD-员工删除\" class=\"headerlink\" title=\"8）、CRUD-员工删除\"></a>8）、CRUD-员工删除</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;tr th:each&#x3D;&quot;emp:$&#123;emps&#125;&quot;&gt;\n    &lt;td th:text&#x3D;&quot;$&#123;emp.id&#125;&quot;&gt;&lt;&#x2F;td&gt;\n    &lt;td&gt;[[$&#123;emp.lastName&#125;]]&lt;&#x2F;td&gt;\n    &lt;td th:text&#x3D;&quot;$&#123;emp.email&#125;&quot;&gt;&lt;&#x2F;td&gt;\n    &lt;td th:text&#x3D;&quot;$&#123;emp.gender&#125;&#x3D;&#x3D;0?&#39;女&#39;:&#39;男&#39;&quot;&gt;&lt;&#x2F;td&gt;\n    &lt;td th:text&#x3D;&quot;$&#123;emp.department.departmentName&#125;&quot;&gt;&lt;&#x2F;td&gt;\n    &lt;td th:text&#x3D;&quot;$&#123;#dates.format(emp.birth, &#39;yyyy-MM-dd HH:mm&#39;)&#125;&quot;&gt;&lt;&#x2F;td&gt;\n    &lt;td&gt;\n        &lt;a class&#x3D;&quot;btn btn-sm btn-primary&quot; th:href&#x3D;&quot;@&#123;&#x2F;emp&#x2F;&#125;+$&#123;emp.id&#125;&quot;&gt;编辑&lt;&#x2F;a&gt;\n        &lt;button th:attr&#x3D;&quot;del_uri&#x3D;@&#123;&#x2F;emp&#x2F;&#125;+$&#123;emp.id&#125;&quot; class&#x3D;&quot;btn btn-sm btn-danger deleteBtn&quot;&gt;删除&lt;&#x2F;button&gt;\n    &lt;&#x2F;td&gt;\n&lt;&#x2F;tr&gt;\n\n\n&lt;script&gt;\n    $(&quot;.deleteBtn&quot;).click(function()&#123;\n        &#x2F;&#x2F;删除当前员工的\n        $(&quot;#deleteEmpForm&quot;).attr(&quot;action&quot;,$(this).attr(&quot;del_uri&quot;)).submit();\n        return false;\n    &#125;);\n&lt;&#x2F;script&gt;</code></pre>\n\n\n\n<h2 id=\"7、错误处理机制\"><a href=\"#7、错误处理机制\" class=\"headerlink\" title=\"7、错误处理机制\"></a>7、错误处理机制</h2><h3 id=\"1）、SpringBoot默认的错误处理机制\"><a href=\"#1）、SpringBoot默认的错误处理机制\" class=\"headerlink\" title=\"1）、SpringBoot默认的错误处理机制\"></a>1）、SpringBoot默认的错误处理机制</h3><p>默认效果：</p>\n<p>​\t\t1）、浏览器，返回一个默认的错误页面</p>\n<p><img src=\"/post/springboot/20180226173408.png\"></p>\n<p>  浏览器发送请求的请求头：</p>\n<p><img src=\"/post/springboot/20180226180347.png\"></p>\n<p>​\t\t2）、如果是其他客户端，默认响应一个json数据</p>\n<p><img src=\"/post/springboot/20180226173527.png\"></p>\n<p>​\t\t<img src=\"/post/springboot/20180226180504.png\"></p>\n<p>原理：</p>\n<p>​\t可以参照ErrorMvcAutoConfiguration；错误处理的自动配置；</p>\n<pre><code>  给容器中添加了以下组件\n</code></pre>\n<p>​\t1、DefaultErrorAttributes：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">帮我们在页面共享信息；\n@Override\n\tpublic Map&lt;String, Object&gt; getErrorAttributes(RequestAttributes requestAttributes,\n\t\t\tboolean includeStackTrace) &#123;\n\t\tMap&lt;String, Object&gt; errorAttributes &#x3D; new LinkedHashMap&lt;String, Object&gt;();\n\t\terrorAttributes.put(&quot;timestamp&quot;, new Date());\n\t\taddStatus(errorAttributes, requestAttributes);\n\t\taddErrorDetails(errorAttributes, requestAttributes, includeStackTrace);\n\t\taddPath(errorAttributes, requestAttributes);\n\t\treturn errorAttributes;\n\t&#125;</code></pre>\n\n\n\n<p>​\t2、BasicErrorController：处理默认&#x2F;error请求</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Controller\n@RequestMapping(&quot;$&#123;server.error.path:$&#123;error.path:&#x2F;error&#125;&#125;&quot;)\npublic class BasicErrorController extends AbstractErrorController &#123;\n    \n    @RequestMapping(produces &#x3D; &quot;text&#x2F;html&quot;)&#x2F;&#x2F;产生html类型的数据；浏览器发送的请求来到这个方法处理\n\tpublic ModelAndView errorHtml(HttpServletRequest request,\n\t\t\tHttpServletResponse response) &#123;\n\t\tHttpStatus status &#x3D; getStatus(request);\n\t\tMap&lt;String, Object&gt; model &#x3D; Collections.unmodifiableMap(getErrorAttributes(\n\t\t\t\trequest, isIncludeStackTrace(request, MediaType.TEXT_HTML)));\n\t\tresponse.setStatus(status.value());\n        \n        &#x2F;&#x2F;去哪个页面作为错误页面；包含页面地址和页面内容\n\t\tModelAndView modelAndView &#x3D; resolveErrorView(request, response, status, model);\n\t\treturn (modelAndView &#x3D;&#x3D; null ? new ModelAndView(&quot;error&quot;, model) : modelAndView);\n\t&#125;\n\n\t@RequestMapping\n\t@ResponseBody    &#x2F;&#x2F;产生json数据，其他客户端来到这个方法处理；\n\tpublic ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;\n\t\tMap&lt;String, Object&gt; body &#x3D; getErrorAttributes(request,\n\t\t\t\tisIncludeStackTrace(request, MediaType.ALL));\n\t\tHttpStatus status &#x3D; getStatus(request);\n\t\treturn new ResponseEntity&lt;Map&lt;String, Object&gt;&gt;(body, status);\n\t&#125;</code></pre>\n\n\n\n<p>​\t3、ErrorPageCustomizer：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Value(&quot;$&#123;error.path:&#x2F;error&#125;&quot;)\nprivate String path &#x3D; &quot;&#x2F;error&quot;;  系统出现错误以后来到error请求进行处理；（web.xml注册的错误页面规则）</code></pre>\n\n\n\n<p>​\t4、DefaultErrorViewResolver：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Override\n\tpublic ModelAndView resolveErrorView(HttpServletRequest request, HttpStatus status,\n\t\t\tMap&lt;String, Object&gt; model) &#123;\n\t\tModelAndView modelAndView &#x3D; resolve(String.valueOf(status), model);\n\t\tif (modelAndView &#x3D;&#x3D; null &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;\n\t\t\tmodelAndView &#x3D; resolve(SERIES_VIEWS.get(status.series()), model);\n\t\t&#125;\n\t\treturn modelAndView;\n\t&#125;\n\n\tprivate ModelAndView resolve(String viewName, Map&lt;String, Object&gt; model) &#123;\n        &#x2F;&#x2F;默认SpringBoot可以去找到一个页面？  error&#x2F;404\n\t\tString errorViewName &#x3D; &quot;error&#x2F;&quot; + viewName;\n        \n        &#x2F;&#x2F;模板引擎可以解析这个页面地址就用模板引擎解析\n\t\tTemplateAvailabilityProvider provider &#x3D; this.templateAvailabilityProviders\n\t\t\t\t.getProvider(errorViewName, this.applicationContext);\n\t\tif (provider !&#x3D; null) &#123;\n            &#x2F;&#x2F;模板引擎可用的情况下返回到errorViewName指定的视图地址\n\t\t\treturn new ModelAndView(errorViewName, model);\n\t\t&#125;\n        &#x2F;&#x2F;模板引擎不可用，就在静态资源文件夹下找errorViewName对应的页面   error&#x2F;404.html\n\t\treturn resolveResource(errorViewName, model);\n\t&#125;</code></pre>\n\n\n\n<p>​\t步骤：</p>\n<p>​\t\t一但系统出现4xx或者5xx之类的错误；ErrorPageCustomizer就会生效（定制错误的响应规则）；就会来到&#x2F;error请求；就会被<strong>BasicErrorController</strong>处理；</p>\n<p>​\t\t1）响应页面；去哪个页面是由<strong>DefaultErrorViewResolver</strong>解析得到的；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">protected ModelAndView resolveErrorView(HttpServletRequest request,\n      HttpServletResponse response, HttpStatus status, Map&lt;String, Object&gt; model) &#123;\n    &#x2F;&#x2F;所有的ErrorViewResolver得到ModelAndView\n   for (ErrorViewResolver resolver : this.errorViewResolvers) &#123;\n      ModelAndView modelAndView &#x3D; resolver.resolveErrorView(request, status, model);\n      if (modelAndView !&#x3D; null) &#123;\n         return modelAndView;\n      &#125;\n   &#125;\n   return null;\n&#125;</code></pre>\n\n<h3 id=\"2）、如果定制错误响应：\"><a href=\"#2）、如果定制错误响应：\" class=\"headerlink\" title=\"2）、如果定制错误响应：\"></a>2）、如果定制错误响应：</h3><h4 id=\"1）、如何定制错误的页面；\"><a href=\"#1）、如何定制错误的页面；\" class=\"headerlink\" title=\"1）、如何定制错误的页面；\"></a><strong>1）、如何定制错误的页面；</strong></h4><p>​\t\t\t<strong>1）、有模板引擎的情况下；error&#x2F;状态码;</strong> 【将错误页面命名为  错误状态码.html 放在模板引擎文件夹里面的 error文件夹下】，发生此状态码的错误就会来到  对应的页面；</p>\n<p>​\t\t\t我们可以使用4xx和5xx作为错误页面的文件名来匹配这种类型的所有错误，精确优先（优先寻找精确的状态码.html）；\t\t</p>\n<p>​\t\t\t页面能获取的信息；</p>\n<p>​\t\t\t\ttimestamp：时间戳</p>\n<p>​\t\t\t\tstatus：状态码</p>\n<p>​\t\t\t\terror：错误提示</p>\n<p>​\t\t\t\texception：异常对象</p>\n<p>​\t\t\t\tmessage：异常消息</p>\n<p>​\t\t\t\terrors：JSR303数据校验的错误都在这里</p>\n<p>​\t\t\t2）、没有模板引擎（模板引擎找不到这个错误页面），静态资源文件夹下找；</p>\n<p>​\t\t\t3）、以上都没有错误页面，就是默认来到SpringBoot默认的错误提示页面；</p>\n<h4 id=\"2）、如何定制错误的json数据；\"><a href=\"#2）、如何定制错误的json数据；\" class=\"headerlink\" title=\"2）、如何定制错误的json数据；\"></a>2）、如何定制错误的json数据；</h4><p>​\t\t1）、自定义异常处理&amp;返回定制json数据；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@ControllerAdvice\npublic class MyExceptionHandler &#123;\n\n    @ResponseBody\n    @ExceptionHandler(UserNotExistException.class)\n    public Map&lt;String,Object&gt; handleException(Exception e)&#123;\n        Map&lt;String,Object&gt; map &#x3D; new HashMap&lt;&gt;();\n        map.put(&quot;code&quot;,&quot;user.notexist&quot;);\n        map.put(&quot;message&quot;,e.getMessage());\n        return map;\n    &#125;\n&#125;\n&#x2F;&#x2F;没有自适应效果...</code></pre>\n\n\n\n<p>​\t\t2）、转发到&#x2F;error进行自适应响应效果处理</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@ExceptionHandler(UserNotExistException.class)\n   public String handleException(Exception e, HttpServletRequest request)&#123;\n       Map&lt;String,Object&gt; map &#x3D; new HashMap&lt;&gt;();\n       &#x2F;&#x2F;传入我们自己的错误状态码  4xx 5xx，否则就不会进入定制错误页面的解析流程\n       &#x2F;**\n        * Integer statusCode &#x3D; (Integer) request\n        .getAttribute(&quot;javax.servlet.error.status_code&quot;);\n        *&#x2F;\n       request.setAttribute(&quot;javax.servlet.error.status_code&quot;,500);\n       map.put(&quot;code&quot;,&quot;user.notexist&quot;);\n       map.put(&quot;message&quot;,e.getMessage());\n       &#x2F;&#x2F;转发到&#x2F;error\n       return &quot;forward:&#x2F;error&quot;;\n   &#125;</code></pre>\n\n<h4 id=\"3）、将我们的定制数据携带出去；\"><a href=\"#3）、将我们的定制数据携带出去；\" class=\"headerlink\" title=\"3）、将我们的定制数据携带出去；\"></a>3）、将我们的定制数据携带出去；</h4><p>出现错误以后，会来到&#x2F;error请求，会被BasicErrorController处理，响应出去可以获取的数据是由getErrorAttributes得到的（是AbstractErrorController（ErrorController）规定的方法）；</p>\n<p>​\t1、完全来编写一个ErrorController的实现类【或者是编写AbstractErrorController的子类】，放在容器中；</p>\n<p>​\t2、页面上能用的数据，或者是json返回能用的数据都是通过errorAttributes.getErrorAttributes得到；</p>\n<p>​\t\t\t容器中DefaultErrorAttributes.getErrorAttributes()；默认进行数据处理的；</p>\n<p>自定义ErrorAttributes</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;给容器中加入我们自己定义的ErrorAttributes\n@Component\npublic class MyErrorAttributes extends DefaultErrorAttributes &#123;\n\n    @Override\n    public Map&lt;String, Object&gt; getErrorAttributes(RequestAttributes requestAttributes, boolean includeStackTrace) &#123;\n        Map&lt;String, Object&gt; map &#x3D; super.getErrorAttributes(requestAttributes, includeStackTrace);\n        map.put(&quot;company&quot;,&quot;atguigu&quot;);\n        return map;\n    &#125;\n&#125;</code></pre>\n\n<p>最终的效果：响应是自适应的，可以通过定制ErrorAttributes改变需要返回的内容，</p>\n<p><img src=\"/post/springboot/20180228135513.png\"></p>\n<h2 id=\"8、配置嵌入式Servlet容器\"><a href=\"#8、配置嵌入式Servlet容器\" class=\"headerlink\" title=\"8、配置嵌入式Servlet容器\"></a>8、配置嵌入式Servlet容器</h2><p>SpringBoot默认使用Tomcat作为嵌入式的Servlet容器；</p>\n<p><img src=\"/post/springboot/20180301142915.png\"></p>\n<p>问题？</p>\n<h3 id=\"1）、如何定制和修改Servlet容器的相关配置；\"><a href=\"#1）、如何定制和修改Servlet容器的相关配置；\" class=\"headerlink\" title=\"1）、如何定制和修改Servlet容器的相关配置；\"></a>1）、如何定制和修改Servlet容器的相关配置；</h3><p>1、修改和server有关的配置（ServerProperties【也是EmbeddedServletContainerCustomizer】）；</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\">server.port&#x3D;8081\nserver.context-path&#x3D;&#x2F;crud\n\nserver.tomcat.uri-encoding&#x3D;UTF-8\n\n&#x2F;&#x2F;通用的Servlet容器设置\nserver.xxx\n&#x2F;&#x2F;Tomcat的设置\nserver.tomcat.xxx</code></pre>\n\n<p>2、编写一个<strong>EmbeddedServletContainerCustomizer</strong>：嵌入式的Servlet容器的定制器；来修改Servlet容器的配置</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Bean  &#x2F;&#x2F;一定要将这个定制器加入到容器中\npublic EmbeddedServletContainerCustomizer embeddedServletContainerCustomizer()&#123;\n    return new EmbeddedServletContainerCustomizer() &#123;\n\n        &#x2F;&#x2F;定制嵌入式的Servlet容器相关的规则\n        @Override\n        public void customize(ConfigurableEmbeddedServletContainer container) &#123;\n            container.setPort(8083);\n        &#125;\n    &#125;;\n&#125;</code></pre>\n\n<h3 id=\"2）、注册Servlet三大组件【Servlet、Filter、Listener】\"><a href=\"#2）、注册Servlet三大组件【Servlet、Filter、Listener】\" class=\"headerlink\" title=\"2）、注册Servlet三大组件【Servlet、Filter、Listener】\"></a>2）、注册Servlet三大组件【Servlet、Filter、Listener】</h3><p>由于SpringBoot默认是以jar包的方式启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml文件。</p>\n<p>注册三大组件用以下方式</p>\n<p>ServletRegistrationBean</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;注册三大组件\n@Bean\npublic ServletRegistrationBean myServlet()&#123;\n    ServletRegistrationBean registrationBean &#x3D; new ServletRegistrationBean(new MyServlet(),&quot;&#x2F;myServlet&quot;);\n    return registrationBean;\n&#125;\n</code></pre>\n\n<p>FilterRegistrationBean</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Bean\npublic FilterRegistrationBean myFilter()&#123;\n    FilterRegistrationBean registrationBean &#x3D; new FilterRegistrationBean();\n    registrationBean.setFilter(new MyFilter());\n    registrationBean.setUrlPatterns(Arrays.asList(&quot;&#x2F;hello&quot;,&quot;&#x2F;myServlet&quot;));\n    return registrationBean;\n&#125;</code></pre>\n\n<p>ServletListenerRegistrationBean</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Bean\npublic ServletListenerRegistrationBean myListener()&#123;\n    ServletListenerRegistrationBean&lt;MyListener&gt; registrationBean &#x3D; new ServletListenerRegistrationBean&lt;&gt;(new MyListener());\n    return registrationBean;\n&#125;</code></pre>\n\n\n\n<p>SpringBoot帮我们自动SpringMVC的时候，自动的注册SpringMVC的前端控制器；DIspatcherServlet；</p>\n<p>DispatcherServletAutoConfiguration中：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Bean(name &#x3D; DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)\n@ConditionalOnBean(value &#x3D; DispatcherServlet.class, name &#x3D; DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)\npublic ServletRegistrationBean dispatcherServletRegistration(\n      DispatcherServlet dispatcherServlet) &#123;\n   ServletRegistrationBean registration &#x3D; new ServletRegistrationBean(\n         dispatcherServlet, this.serverProperties.getServletMapping());\n    &#x2F;&#x2F;默认拦截： &#x2F;  所有请求；包静态资源，但是不拦截jsp请求；   &#x2F;*会拦截jsp\n    &#x2F;&#x2F;可以通过server.servletPath来修改SpringMVC前端控制器默认拦截的请求路径\n    \n   registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);\n   registration.setLoadOnStartup(\n         this.webMvcProperties.getServlet().getLoadOnStartup());\n   if (this.multipartConfig !&#x3D; null) &#123;\n      registration.setMultipartConfig(this.multipartConfig);\n   &#125;\n   return registration;\n&#125;\n</code></pre>\n\n<p>2）、SpringBoot能不能支持其他的Servlet容器；</p>\n<h3 id=\"3）、替换为其他嵌入式Servlet容器\"><a href=\"#3）、替换为其他嵌入式Servlet容器\" class=\"headerlink\" title=\"3）、替换为其他嵌入式Servlet容器\"></a>3）、替换为其他嵌入式Servlet容器</h3><p><img src=\"/post/springboot/20180302114401.png\"></p>\n<p>默认支持：</p>\n<p>Tomcat（默认使用）</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n   &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n   &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;\n   引入web模块默认就是使用嵌入式的Tomcat作为Servlet容器；\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p>Jetty</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!-- 引入web模块 --&gt;\n&lt;dependency&gt;\n   &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n   &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;\n   &lt;exclusions&gt;\n      &lt;exclusion&gt;\n         &lt;artifactId&gt;spring-boot-starter-tomcat&lt;&#x2F;artifactId&gt;\n         &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n      &lt;&#x2F;exclusion&gt;\n   &lt;&#x2F;exclusions&gt;\n&lt;&#x2F;dependency&gt;\n\n&lt;!--引入其他的Servlet容器--&gt;\n&lt;dependency&gt;\n   &lt;artifactId&gt;spring-boot-starter-jetty&lt;&#x2F;artifactId&gt;\n   &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p>Undertow</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!-- 引入web模块 --&gt;\n&lt;dependency&gt;\n   &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n   &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;\n   &lt;exclusions&gt;\n      &lt;exclusion&gt;\n         &lt;artifactId&gt;spring-boot-starter-tomcat&lt;&#x2F;artifactId&gt;\n         &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n      &lt;&#x2F;exclusion&gt;\n   &lt;&#x2F;exclusions&gt;\n&lt;&#x2F;dependency&gt;\n\n&lt;!--引入其他的Servlet容器--&gt;\n&lt;dependency&gt;\n   &lt;artifactId&gt;spring-boot-starter-undertow&lt;&#x2F;artifactId&gt;\n   &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<h3 id=\"4）、嵌入式Servlet容器自动配置原理；\"><a href=\"#4）、嵌入式Servlet容器自动配置原理；\" class=\"headerlink\" title=\"4）、嵌入式Servlet容器自动配置原理；\"></a>4）、嵌入式Servlet容器自动配置原理；</h3><p>EmbeddedServletContainerAutoConfiguration：嵌入式的Servlet容器自动配置？</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)\n@Configuration\n@ConditionalOnWebApplication\n@Import(BeanPostProcessorsRegistrar.class)\n&#x2F;&#x2F;导入BeanPostProcessorsRegistrar：Spring注解版；给容器中导入一些组件\n&#x2F;&#x2F;导入了EmbeddedServletContainerCustomizerBeanPostProcessor：\n&#x2F;&#x2F;后置处理器：bean初始化前后（创建完对象，还没赋值赋值）执行初始化工作\npublic class EmbeddedServletContainerAutoConfiguration &#123;\n    \n    @Configuration\n\t@ConditionalOnClass(&#123; Servlet.class, Tomcat.class &#125;)&#x2F;&#x2F;判断当前是否引入了Tomcat依赖；\n\t@ConditionalOnMissingBean(value &#x3D; EmbeddedServletContainerFactory.class, search &#x3D; SearchStrategy.CURRENT)&#x2F;&#x2F;判断当前容器没有用户自己定义EmbeddedServletContainerFactory：嵌入式的Servlet容器工厂；作用：创建嵌入式的Servlet容器\n\tpublic static class EmbeddedTomcat &#123;\n\n\t\t@Bean\n\t\tpublic TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() &#123;\n\t\t\treturn new TomcatEmbeddedServletContainerFactory();\n\t\t&#125;\n\n\t&#125;\n    \n    &#x2F;**\n\t * Nested configuration if Jetty is being used.\n\t *&#x2F;\n\t@Configuration\n\t@ConditionalOnClass(&#123; Servlet.class, Server.class, Loader.class,\n\t\t\tWebAppContext.class &#125;)\n\t@ConditionalOnMissingBean(value &#x3D; EmbeddedServletContainerFactory.class, search &#x3D; SearchStrategy.CURRENT)\n\tpublic static class EmbeddedJetty &#123;\n\n\t\t@Bean\n\t\tpublic JettyEmbeddedServletContainerFactory jettyEmbeddedServletContainerFactory() &#123;\n\t\t\treturn new JettyEmbeddedServletContainerFactory();\n\t\t&#125;\n\n\t&#125;\n\n\t&#x2F;**\n\t * Nested configuration if Undertow is being used.\n\t *&#x2F;\n\t@Configuration\n\t@ConditionalOnClass(&#123; Servlet.class, Undertow.class, SslClientAuthMode.class &#125;)\n\t@ConditionalOnMissingBean(value &#x3D; EmbeddedServletContainerFactory.class, search &#x3D; SearchStrategy.CURRENT)\n\tpublic static class EmbeddedUndertow &#123;\n\n\t\t@Bean\n\t\tpublic UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory() &#123;\n\t\t\treturn new UndertowEmbeddedServletContainerFactory();\n\t\t&#125;\n\n\t&#125;</code></pre>\n\n<p>1）、EmbeddedServletContainerFactory（嵌入式Servlet容器工厂）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public interface EmbeddedServletContainerFactory &#123;\n\n   &#x2F;&#x2F;获取嵌入式的Servlet容器\n   EmbeddedServletContainer getEmbeddedServletContainer(\n         ServletContextInitializer... initializers);\n\n&#125;</code></pre>\n\n<p><img src=\"/post/springboot/20180302144835.png\"></p>\n<p>2）、EmbeddedServletContainer：（嵌入式的Servlet容器）</p>\n<p><img src=\"/post/springboot/20180302144910.png\"></p>\n<p>3）、以<strong>TomcatEmbeddedServletContainerFactory</strong>为例</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Override\npublic EmbeddedServletContainer getEmbeddedServletContainer(\n      ServletContextInitializer... initializers) &#123;\n    &#x2F;&#x2F;创建一个Tomcat\n   Tomcat tomcat &#x3D; new Tomcat();\n    \n    &#x2F;&#x2F;配置Tomcat的基本环节\n   File baseDir &#x3D; (this.baseDirectory !&#x3D; null ? this.baseDirectory\n         : createTempDir(&quot;tomcat&quot;));\n   tomcat.setBaseDir(baseDir.getAbsolutePath());\n   Connector connector &#x3D; new Connector(this.protocol);\n   tomcat.getService().addConnector(connector);\n   customizeConnector(connector);\n   tomcat.setConnector(connector);\n   tomcat.getHost().setAutoDeploy(false);\n   configureEngine(tomcat.getEngine());\n   for (Connector additionalConnector : this.additionalTomcatConnectors) &#123;\n      tomcat.getService().addConnector(additionalConnector);\n   &#125;\n   prepareContext(tomcat.getHost(), initializers);\n    \n    &#x2F;&#x2F;将配置好的Tomcat传入进去，返回一个EmbeddedServletContainer；并且启动Tomcat服务器\n   return getTomcatEmbeddedServletContainer(tomcat);\n&#125;</code></pre>\n\n<p>4）、我们对嵌入式容器的配置修改是怎么生效？</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ServerProperties、EmbeddedServletContainerCustomizer</code></pre>\n\n\n\n<p><strong>EmbeddedServletContainerCustomizer</strong>：定制器帮我们修改了Servlet容器的配置？</p>\n<p>怎么修改的原理？</p>\n<p>5）、容器中导入了<strong>EmbeddedServletContainerCustomizerBeanPostProcessor</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;初始化之前\n@Override\npublic Object postProcessBeforeInitialization(Object bean, String beanName)\n      throws BeansException &#123;\n    &#x2F;&#x2F;如果当前初始化的是一个ConfigurableEmbeddedServletContainer类型的组件\n   if (bean instanceof ConfigurableEmbeddedServletContainer) &#123;\n       &#x2F;&#x2F;\n      postProcessBeforeInitialization((ConfigurableEmbeddedServletContainer) bean);\n   &#125;\n   return bean;\n&#125;\n\nprivate void postProcessBeforeInitialization(\n\t\t\tConfigurableEmbeddedServletContainer bean) &#123;\n    &#x2F;&#x2F;获取所有的定制器，调用每一个定制器的customize方法来给Servlet容器进行属性赋值；\n    for (EmbeddedServletContainerCustomizer customizer : getCustomizers()) &#123;\n        customizer.customize(bean);\n    &#125;\n&#125;\n\nprivate Collection&lt;EmbeddedServletContainerCustomizer&gt; getCustomizers() &#123;\n    if (this.customizers &#x3D;&#x3D; null) &#123;\n        &#x2F;&#x2F; Look up does not include the parent context\n        this.customizers &#x3D; new ArrayList&lt;EmbeddedServletContainerCustomizer&gt;(\n            this.beanFactory\n            &#x2F;&#x2F;从容器中获取所有这葛类型的组件：EmbeddedServletContainerCustomizer\n            &#x2F;&#x2F;定制Servlet容器，给容器中可以添加一个EmbeddedServletContainerCustomizer类型的组件\n            .getBeansOfType(EmbeddedServletContainerCustomizer.class,\n                            false, false)\n            .values());\n        Collections.sort(this.customizers, AnnotationAwareOrderComparator.INSTANCE);\n        this.customizers &#x3D; Collections.unmodifiableList(this.customizers);\n    &#125;\n    return this.customizers;\n&#125;\n\nServerProperties也是定制器</code></pre>\n\n<p>步骤：</p>\n<p>1）、SpringBoot根据导入的依赖情况，给容器中添加相应的EmbeddedServletContainerFactory【TomcatEmbeddedServletContainerFactory】</p>\n<p>2）、容器中某个组件要创建对象就会惊动后置处理器；EmbeddedServletContainerCustomizerBeanPostProcessor；</p>\n<p>只要是嵌入式的Servlet容器工厂，后置处理器就工作；</p>\n<p>3）、后置处理器，从容器中获取所有的<strong>EmbeddedServletContainerCustomizer</strong>，调用定制器的定制方法</p>\n<p>###5）、嵌入式Servlet容器启动原理；</p>\n<p>什么时候创建嵌入式的Servlet容器工厂？什么时候获取嵌入式的Servlet容器并启动Tomcat；</p>\n<p>获取嵌入式的Servlet容器工厂：</p>\n<p>1）、SpringBoot应用启动运行run方法</p>\n<p>2）、refreshContext(context);SpringBoot刷新IOC容器【创建IOC容器对象，并初始化容器，创建容器中的每一个组件】；如果是web应用创建<strong>AnnotationConfigEmbeddedWebApplicationContext</strong>，否则：<strong>AnnotationConfigApplicationContext</strong></p>\n<p>3）、refresh(context);<strong>刷新刚才创建好的ioc容器；</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public void refresh() throws BeansException, IllegalStateException &#123;\n   synchronized (this.startupShutdownMonitor) &#123;\n      &#x2F;&#x2F; Prepare this context for refreshing.\n      prepareRefresh();\n\n      &#x2F;&#x2F; Tell the subclass to refresh the internal bean factory.\n      ConfigurableListableBeanFactory beanFactory &#x3D; obtainFreshBeanFactory();\n\n      &#x2F;&#x2F; Prepare the bean factory for use in this context.\n      prepareBeanFactory(beanFactory);\n\n      try &#123;\n         &#x2F;&#x2F; Allows post-processing of the bean factory in context subclasses.\n         postProcessBeanFactory(beanFactory);\n\n         &#x2F;&#x2F; Invoke factory processors registered as beans in the context.\n         invokeBeanFactoryPostProcessors(beanFactory);\n\n         &#x2F;&#x2F; Register bean processors that intercept bean creation.\n         registerBeanPostProcessors(beanFactory);\n\n         &#x2F;&#x2F; Initialize message source for this context.\n         initMessageSource();\n\n         &#x2F;&#x2F; Initialize event multicaster for this context.\n         initApplicationEventMulticaster();\n\n         &#x2F;&#x2F; Initialize other special beans in specific context subclasses.\n         onRefresh();\n\n         &#x2F;&#x2F; Check for listener beans and register them.\n         registerListeners();\n\n         &#x2F;&#x2F; Instantiate all remaining (non-lazy-init) singletons.\n         finishBeanFactoryInitialization(beanFactory);\n\n         &#x2F;&#x2F; Last step: publish corresponding event.\n         finishRefresh();\n      &#125;\n\n      catch (BeansException ex) &#123;\n         if (logger.isWarnEnabled()) &#123;\n            logger.warn(&quot;Exception encountered during context initialization - &quot; +\n                  &quot;cancelling refresh attempt: &quot; + ex);\n         &#125;\n\n         &#x2F;&#x2F; Destroy already created singletons to avoid dangling resources.\n         destroyBeans();\n\n         &#x2F;&#x2F; Reset &#39;active&#39; flag.\n         cancelRefresh(ex);\n\n         &#x2F;&#x2F; Propagate exception to caller.\n         throw ex;\n      &#125;\n\n      finally &#123;\n         &#x2F;&#x2F; Reset common introspection caches in Spring&#39;s core, since we\n         &#x2F;&#x2F; might not ever need metadata for singleton beans anymore...\n         resetCommonCaches();\n      &#125;\n   &#125;\n&#125;</code></pre>\n\n<p>4）、  onRefresh(); web的ioc容器重写了onRefresh方法</p>\n<p>5）、webioc容器会创建嵌入式的Servlet容器；<strong>createEmbeddedServletContainer</strong>();</p>\n<p><strong>6）、获取嵌入式的Servlet容器工厂：</strong></p>\n<p>EmbeddedServletContainerFactory containerFactory &#x3D; getEmbeddedServletContainerFactory();</p>\n<p>​\t从ioc容器中获取EmbeddedServletContainerFactory 组件；<strong>TomcatEmbeddedServletContainerFactory</strong>创建对象，后置处理器一看是这个对象，就获取所有的定制器来先定制Servlet容器的相关配置；</p>\n<p>7）、<strong>使用容器工厂获取嵌入式的Servlet容器</strong>：this.embeddedServletContainer &#x3D; containerFactory      .getEmbeddedServletContainer(getSelfInitializer());</p>\n<p>8）、嵌入式的Servlet容器创建对象并启动Servlet容器；</p>\n<p><strong>先启动嵌入式的Servlet容器，再将ioc容器中剩下没有创建出的对象获取出来；</strong></p>\n<p><strong>&#x3D;&#x3D;IOC容器启动创建嵌入式的Servlet容器&#x3D;&#x3D;</strong></p>\n<h2 id=\"9、使用外置的Servlet容器\"><a href=\"#9、使用外置的Servlet容器\" class=\"headerlink\" title=\"9、使用外置的Servlet容器\"></a>9、使用外置的Servlet容器</h2><p>嵌入式Servlet容器：应用打成可执行的jar</p>\n<p>​\t\t优点：简单、便携；</p>\n<p>​\t\t缺点：默认不支持JSP、优化定制比较复杂（使用定制器【ServerProperties、自定义EmbeddedServletContainerCustomizer】，自己编写嵌入式Servlet容器的创建工厂【EmbeddedServletContainerFactory】）；</p>\n<p>外置的Servlet容器：外面安装Tomcat—应用war包的方式打包；</p>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>1）、必须创建一个war项目；（利用idea创建好目录结构）</p>\n<p>2）、将嵌入式的Tomcat指定为provided；</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n   &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n   &lt;artifactId&gt;spring-boot-starter-tomcat&lt;&#x2F;artifactId&gt;\n   &lt;scope&gt;provided&lt;&#x2F;scope&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p>3）、必须编写一个<strong>SpringBootServletInitializer</strong>的子类，并调用configure方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ServletInitializer extends SpringBootServletInitializer &#123;\n\n   @Override\n   protected SpringApplicationBuilder configure(SpringApplicationBuilder application) &#123;\n       &#x2F;&#x2F;传入SpringBoot应用的主程序\n      return application.sources(SpringBoot04WebJspApplication.class);\n   &#125;\n\n&#125;</code></pre>\n\n<p>4）、启动服务器就可以使用；</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>jar包：执行SpringBoot主类的main方法，启动ioc容器，创建嵌入式的Servlet容器；</p>\n<p>war包：启动服务器，<strong>服务器启动SpringBoot应用</strong>【SpringBootServletInitializer】，启动ioc容器；</p>\n<p>servlet3.0（Spring注解版）：</p>\n<p>8.2.4 Shared libraries &#x2F; runtimes pluggability：</p>\n<p>规则：</p>\n<p>​\t1）、服务器启动（web应用启动）会创建当前web应用里面每一个jar包里面ServletContainerInitializer实例：</p>\n<p>​\t2）、ServletContainerInitializer的实现放在jar包的META-INF&#x2F;services文件夹下，有一个名为javax.servlet.ServletContainerInitializer的文件，内容就是ServletContainerInitializer的实现类的全类名</p>\n<p>​\t3）、还可以使用@HandlesTypes，在应用启动的时候加载我们感兴趣的类；</p>\n<p>流程：</p>\n<p>1）、启动Tomcat</p>\n<p>2）、org\\springframework\\spring-web\\4.3.14.RELEASE\\spring-web-4.3.14.RELEASE.jar!\\META-INF\\services\\javax.servlet.ServletContainerInitializer：</p>\n<p>Spring的web模块里面有这个文件：<strong>org.springframework.web.SpringServletContainerInitializer</strong></p>\n<p>3）、SpringServletContainerInitializer将@HandlesTypes(WebApplicationInitializer.class)标注的所有这个类型的类都传入到onStartup方法的Set&lt;Class&lt;?&gt;&gt;；为这些WebApplicationInitializer类型的类创建实例；</p>\n<p>4）、每一个WebApplicationInitializer都调用自己的onStartup；</p>\n<p><img src=\"/post/springboot/20180302221835.png\"></p>\n<p>5）、相当于我们的SpringBootServletInitializer的类会被创建对象，并执行onStartup方法</p>\n<p>6）、SpringBootServletInitializer实例执行onStartup的时候会createRootApplicationContext；创建容器</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">protected WebApplicationContext createRootApplicationContext(\n      ServletContext servletContext) &#123;\n    &#x2F;&#x2F;1、创建SpringApplicationBuilder\n   SpringApplicationBuilder builder &#x3D; createSpringApplicationBuilder();\n   StandardServletEnvironment environment &#x3D; new StandardServletEnvironment();\n   environment.initPropertySources(servletContext, null);\n   builder.environment(environment);\n   builder.main(getClass());\n   ApplicationContext parent &#x3D; getExistingRootWebApplicationContext(servletContext);\n   if (parent !&#x3D; null) &#123;\n      this.logger.info(&quot;Root context already created (using as parent).&quot;);\n      servletContext.setAttribute(\n            WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, null);\n      builder.initializers(new ParentContextApplicationContextInitializer(parent));\n   &#125;\n   builder.initializers(\n         new ServletContextApplicationContextInitializer(servletContext));\n   builder.contextClass(AnnotationConfigEmbeddedWebApplicationContext.class);\n    \n    &#x2F;&#x2F;调用configure方法，子类重写了这个方法，将SpringBoot的主程序类传入了进来\n   builder &#x3D; configure(builder);\n    \n    &#x2F;&#x2F;使用builder创建一个Spring应用\n   SpringApplication application &#x3D; builder.build();\n   if (application.getSources().isEmpty() &amp;&amp; AnnotationUtils\n         .findAnnotation(getClass(), Configuration.class) !&#x3D; null) &#123;\n      application.getSources().add(getClass());\n   &#125;\n   Assert.state(!application.getSources().isEmpty(),\n         &quot;No SpringApplication sources have been defined. Either override the &quot;\n               + &quot;configure method or add an @Configuration annotation&quot;);\n   &#x2F;&#x2F; Ensure error pages are registered\n   if (this.registerErrorPageFilter) &#123;\n      application.getSources().add(ErrorPageFilterConfiguration.class);\n   &#125;\n    &#x2F;&#x2F;启动Spring应用\n   return run(application);\n&#125;</code></pre>\n\n<p>7）、Spring的应用就启动并且创建IOC容器</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public ConfigurableApplicationContext run(String... args) &#123;\n   StopWatch stopWatch &#x3D; new StopWatch();\n   stopWatch.start();\n   ConfigurableApplicationContext context &#x3D; null;\n   FailureAnalyzers analyzers &#x3D; null;\n   configureHeadlessProperty();\n   SpringApplicationRunListeners listeners &#x3D; getRunListeners(args);\n   listeners.starting();\n   try &#123;\n      ApplicationArguments applicationArguments &#x3D; new DefaultApplicationArguments(\n            args);\n      ConfigurableEnvironment environment &#x3D; prepareEnvironment(listeners,\n            applicationArguments);\n      Banner printedBanner &#x3D; printBanner(environment);\n      context &#x3D; createApplicationContext();\n      analyzers &#x3D; new FailureAnalyzers(context);\n      prepareContext(context, environment, listeners, applicationArguments,\n            printedBanner);\n       \n       &#x2F;&#x2F;刷新IOC容器\n      refreshContext(context);\n      afterRefresh(context, applicationArguments);\n      listeners.finished(context, null);\n      stopWatch.stop();\n      if (this.logStartupInfo) &#123;\n         new StartupInfoLogger(this.mainApplicationClass)\n               .logStarted(getApplicationLog(), stopWatch);\n      &#125;\n      return context;\n   &#125;\n   catch (Throwable ex) &#123;\n      handleRunFailure(context, listeners, analyzers, ex);\n      throw new IllegalStateException(ex);\n   &#125;\n&#125;</code></pre>\n\n<p><strong>&#x3D;&#x3D;启动Servlet容器，再启动SpringBoot应用&#x3D;&#x3D;</strong></p>\n<h1 id=\"五、Docker\"><a href=\"#五、Docker\" class=\"headerlink\" title=\"五、Docker\"></a>五、Docker</h1><h2 id=\"1、简介-1\"><a href=\"#1、简介-1\" class=\"headerlink\" title=\"1、简介\"></a>1、简介</h2><p><strong>Docker</strong>是一个开源的应用容器引擎；是一个轻量级容器技术；</p>\n<p>Docker支持将软件编译成一个镜像；然后在镜像中各种软件做好配置，将镜像发布出去，其他使用者可以直接使用这个镜像；</p>\n<p>运行中的这个镜像称为容器，容器启动是非常快速的。</p>\n<p><img src=\"/post/springboot/20180303145450.png\"></p>\n<p><img src=\"/post/springboot/20180303145531.png\"></p>\n<h2 id=\"2、核心概念\"><a href=\"#2、核心概念\" class=\"headerlink\" title=\"2、核心概念\"></a>2、核心概念</h2><p>docker主机(Host)：安装了Docker程序的机器（Docker直接安装在操作系统之上）；</p>\n<p>docker客户端(Client)：连接docker主机进行操作；</p>\n<p>docker仓库(Registry)：用来保存各种打包好的软件镜像；</p>\n<p>docker镜像(springboot)：软件打包好的镜像；放在docker仓库中；</p>\n<p>docker容器(Container)：镜像启动后的实例称为一个容器；容器是独立运行的一个或一组应用</p>\n<p><img src=\"/post/springboot/20180303165113.png\"></p>\n<p>使用Docker的步骤：</p>\n<p>1）、安装Docker</p>\n<p>2）、去Docker仓库找到这个软件对应的镜像；</p>\n<p>3）、使用Docker运行这个镜像，这个镜像就会生成一个Docker容器；</p>\n<p>4）、对容器的启动停止就是对软件的启动停止；</p>\n<h2 id=\"3、安装Docker\"><a href=\"#3、安装Docker\" class=\"headerlink\" title=\"3、安装Docker\"></a>3、安装Docker</h2><h4 id=\"1）、安装linux虚拟机\"><a href=\"#1）、安装linux虚拟机\" class=\"headerlink\" title=\"1）、安装linux虚拟机\"></a>1）、安装linux虚拟机</h4><p>​\t1）、VMWare、VirtualBox（安装）；</p>\n<p>​\t2）、导入虚拟机文件centos7-atguigu.ova；</p>\n<p>​\t3）、双击启动linux虚拟机;使用  root&#x2F; 123456登陆</p>\n<p>​\t4）、使用客户端连接linux服务器进行命令操作；</p>\n<p>​\t5）、设置虚拟机网络；</p>\n<p>​\t\t桥接网络&#x3D;&#x3D;&#x3D;选好网卡&#x3D;&#x3D;&#x3D;&#x3D;接入网线；</p>\n<p>​\t6）、设置好网络以后使用命令重启虚拟机的网络</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">service network restart</code></pre>\n\n<p>​\t7）、查看linux的ip地址</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ip addr</code></pre>\n\n<p>​\t8）、使用客户端连接linux；</p>\n<h4 id=\"2）、在linux虚拟机上安装docker\"><a href=\"#2）、在linux虚拟机上安装docker\" class=\"headerlink\" title=\"2）、在linux虚拟机上安装docker\"></a>2）、在linux虚拟机上安装docker</h4><p>步骤：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">1、检查内核版本，必须是3.10及以上\nuname -r\n2、安装docker\nyum install docker\n3、输入y确认安装\n4、启动docker\n[root@localhost ~]# systemctl start docker\n[root@localhost ~]# docker -v\nDocker version 1.12.6, build 3e8e77d&#x2F;1.12.6\n5、开机启动docker\n[root@localhost ~]# systemctl enable docker\nCreated symlink from &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;multi-user.target.wants&#x2F;docker.service to &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;docker.service.\n6、停止docker\nsystemctl stop docker</code></pre>\n\n<h2 id=\"4、Docker常用命令-amp-操作\"><a href=\"#4、Docker常用命令-amp-操作\" class=\"headerlink\" title=\"4、Docker常用命令&amp;操作\"></a>4、Docker常用命令&amp;操作</h2><h3 id=\"1）、镜像操作\"><a href=\"#1）、镜像操作\" class=\"headerlink\" title=\"1）、镜像操作\"></a>1）、镜像操作</h3><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>检索</td>\n<td>docker  search 关键字  eg：docker  search redis</td>\n<td>我们经常去docker  hub上检索镜像的详细信息，如镜像的TAG。</td>\n</tr>\n<tr>\n<td>拉取</td>\n<td>docker pull 镜像名:tag</td>\n<td>:tag是可选的，tag表示标签，多为软件的版本，默认是latest</td>\n</tr>\n<tr>\n<td>列表</td>\n<td>docker springboot</td>\n<td>查看所有本地镜像</td>\n</tr>\n<tr>\n<td>删除</td>\n<td>docker rmi image-id</td>\n<td>删除指定的本地镜像</td>\n</tr>\n</tbody></table>\n<p><a href=\"https://hub.docker.com/\">https://hub.docker.com/</a></p>\n<h3 id=\"2）、容器操作\"><a href=\"#2）、容器操作\" class=\"headerlink\" title=\"2）、容器操作\"></a>2）、容器操作</h3><p>软件镜像（QQ安装程序）—-运行镜像—-产生一个容器（正在运行的软件，运行的QQ）；</p>\n<p>步骤：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">1、搜索镜像\n[root@localhost ~]# docker search tomcat\n2、拉取镜像\n[root@localhost ~]# docker pull tomcat\n3、根据镜像启动容器\ndocker run --name mytomcat -d tomcat:latest\n4、docker ps  \n查看运行中的容器\n5、 停止运行中的容器\ndocker stop  容器的id\n6、查看所有的容器\ndocker ps -a\n7、启动容器\ndocker start 容器id\n8、删除一个容器\n docker rm 容器id\n9、启动一个做了端口映射的tomcat\n[root@localhost ~]# docker run -d -p 8888:8080 tomcat\n-d：后台运行\n-p: 将主机的端口映射到容器的一个端口    主机端口:容器内部的端口\n\n10、为了演示简单关闭了linux的防火墙\nservice firewalld status ；查看防火墙状态\nservice firewalld stop：关闭防火墙\n11、查看容器的日志\ndocker logs container-name&#x2F;container-id\n\n更多命令参看\nhttps:&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;reference&#x2F;commandline&#x2F;docker&#x2F;\n可以参考每一个镜像的文档\n</code></pre>\n\n\n\n<h3 id=\"3）、安装MySQL示例\"><a href=\"#3）、安装MySQL示例\" class=\"headerlink\" title=\"3）、安装MySQL示例\"></a>3）、安装MySQL示例</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker pull mysql</code></pre>\n\n\n\n<p>错误的启动</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">[root@localhost ~]# docker run --name mysql01 -d mysql\n42f09819908bb72dd99ae19e792e0a5d03c48638421fa64cce5f8ba0f40f5846\n\nmysql退出了\n[root@localhost ~]# docker ps -a\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                           PORTS               NAMES\n42f09819908b        mysql               &quot;docker-entrypoint.sh&quot;   34 seconds ago      Exited (1) 33 seconds ago                            mysql01\n538bde63e500        tomcat              &quot;catalina.sh run&quot;        About an hour ago   Exited (143) About an hour ago                       compassionate_\ngoldstine\nc4f1ac60b3fc        tomcat              &quot;catalina.sh run&quot;        About an hour ago   Exited (143) About an hour ago                       lonely_fermi\n81ec743a5271        tomcat              &quot;catalina.sh run&quot;        About an hour ago   Exited (143) About an hour ago                       sick_ramanujan\n\n\n&#x2F;&#x2F;错误日志\n[root@localhost ~]# docker logs 42f09819908b\nerror: database is uninitialized and password option is not specified \n  You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and MYSQL_RANDOM_ROOT_PASSWORD；这个三个参数必须指定一个</code></pre>\n\n<p>正确的启动</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">[root@localhost ~]# docker run --name mysql01 -e MYSQL_ROOT_PASSWORD&#x3D;123456 -d mysql\nb874c56bec49fb43024b3805ab51e9097da779f2f572c22c695305dedd684c5f\n[root@localhost ~]# docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES\nb874c56bec49        mysql               &quot;docker-entrypoint.sh&quot;   4 seconds ago       Up 3 seconds        3306&#x2F;tcp            mysql01</code></pre>\n\n<p>做了端口映射</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">[root@localhost ~]# docker run -p 3306:3306 --name mysql02 -e MYSQL_ROOT_PASSWORD&#x3D;123456 -d mysql\nad10e4bc5c6a0f61cbad43898de71d366117d120e39db651844c0e73863b9434\n[root@localhost ~]# docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES\nad10e4bc5c6a        mysql               &quot;docker-entrypoint.sh&quot;   4 seconds ago       Up 2 seconds        0.0.0.0:3306-&gt;3306&#x2F;tcp   mysql02</code></pre>\n\n\n\n<p>几个其他的高级操作</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker run --name mysql03 -v &#x2F;conf&#x2F;mysql:&#x2F;etc&#x2F;mysql&#x2F;conf.d -e MYSQL_ROOT_PASSWORD&#x3D;my-secret-pw -d mysql:tag\n把主机的&#x2F;conf&#x2F;mysql文件夹挂载到 mysqldocker容器的&#x2F;etc&#x2F;mysql&#x2F;conf.d文件夹里面\n改mysql的配置文件就只需要把mysql配置文件放在自定义的文件夹下（&#x2F;conf&#x2F;mysql）\n\ndocker run --name some-mysql -e MYSQL_ROOT_PASSWORD&#x3D;my-secret-pw -d mysql:tag --character-set-server&#x3D;utf8mb4 --collation-server&#x3D;utf8mb4_unicode_ci\n指定mysql的一些配置参数</code></pre>\n\n\n\n<h1 id=\"六、SpringBoot与数据访问\"><a href=\"#六、SpringBoot与数据访问\" class=\"headerlink\" title=\"六、SpringBoot与数据访问\"></a>六、SpringBoot与数据访问</h1><h2 id=\"1、JDBC\"><a href=\"#1、JDBC\" class=\"headerlink\" title=\"1、JDBC\"></a>1、JDBC</h2><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n\t\t\t&lt;artifactId&gt;spring-boot-starter-jdbc&lt;&#x2F;artifactId&gt;\n\t\t&lt;&#x2F;dependency&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;\n\t\t\t&lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;\n\t\t\t&lt;scope&gt;runtime&lt;&#x2F;scope&gt;\n\t\t&lt;&#x2F;dependency&gt;</code></pre>\n\n\n\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  datasource:\n    username: root\n    password: 123456\n    url: jdbc:mysql:&#x2F;&#x2F;192.168.15.22:3306&#x2F;jdbc\n    driver-class-name: com.mysql.jdbc.Driver</code></pre>\n\n<p>效果：</p>\n<p>​\t默认是用org.apache.tomcat.jdbc.pool.DataSource作为数据源；</p>\n<p>​\t数据源的相关配置都在DataSourceProperties里面；</p>\n<p>自动配置原理：</p>\n<p>org.springframework.boot.autoconfigure.jdbc：</p>\n<p>1、参考DataSourceConfiguration，根据配置创建数据源，默认使用Tomcat连接池；可以使用spring.datasource.type指定自定义的数据源类型；</p>\n<p>2、SpringBoot默认可以支持；</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">org.apache.tomcat.jdbc.pool.DataSource、HikariDataSource、BasicDataSource、</code></pre>\n\n<p>3、自定义数据源类型</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * Generic DataSource configuration.\n *&#x2F;\n@ConditionalOnMissingBean(DataSource.class)\n@ConditionalOnProperty(name &#x3D; &quot;spring.datasource.type&quot;)\nstatic class Generic &#123;\n\n   @Bean\n   public DataSource dataSource(DataSourceProperties properties) &#123;\n       &#x2F;&#x2F;使用DataSourceBuilder创建数据源，利用反射创建响应type的数据源，并且绑定相关属性\n      return properties.initializeDataSourceBuilder().build();\n   &#125;\n\n&#125;</code></pre>\n\n<p>4、<strong>DataSourceInitializer：ApplicationListener</strong>；</p>\n<p>​\t作用：</p>\n<p>​\t\t1）、runSchemaScripts();运行建表语句；</p>\n<p>​\t\t2）、runDataScripts();运行插入数据的sql语句；</p>\n<p>默认只需要将文件命名为：</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\">schema-*.sql、data-*.sql\n默认规则：schema.sql，schema-all.sql；\n可以使用   \n\tschema:\n      - classpath:department.sql\n      指定位置</code></pre>\n\n<p>5、操作数据库：自动配置了JdbcTemplate操作数据库</p>\n<h2 id=\"2、整合Druid数据源\"><a href=\"#2、整合Druid数据源\" class=\"headerlink\" title=\"2、整合Druid数据源\"></a>2、整合Druid数据源</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">导入druid数据源\n@Configuration\npublic class DruidConfig &#123;\n\n    @ConfigurationProperties(prefix &#x3D; &quot;spring.datasource&quot;)\n    @Bean\n    public DataSource druid()&#123;\n       return  new DruidDataSource();\n    &#125;\n\n    &#x2F;&#x2F;配置Druid的监控\n    &#x2F;&#x2F;1、配置一个管理后台的Servlet\n    @Bean\n    public ServletRegistrationBean statViewServlet()&#123;\n        ServletRegistrationBean bean &#x3D; new ServletRegistrationBean(new StatViewServlet(), &quot;&#x2F;druid&#x2F;*&quot;);\n        Map&lt;String,String&gt; initParams &#x3D; new HashMap&lt;&gt;();\n\n        initParams.put(&quot;loginUsername&quot;,&quot;admin&quot;);\n        initParams.put(&quot;loginPassword&quot;,&quot;123456&quot;);\n        initParams.put(&quot;allow&quot;,&quot;&quot;);&#x2F;&#x2F;默认就是允许所有访问\n        initParams.put(&quot;deny&quot;,&quot;192.168.15.21&quot;);\n\n        bean.setInitParameters(initParams);\n        return bean;\n    &#125;\n\n\n    &#x2F;&#x2F;2、配置一个web监控的filter\n    @Bean\n    public FilterRegistrationBean webStatFilter()&#123;\n        FilterRegistrationBean bean &#x3D; new FilterRegistrationBean();\n        bean.setFilter(new WebStatFilter());\n\n        Map&lt;String,String&gt; initParams &#x3D; new HashMap&lt;&gt;();\n        initParams.put(&quot;exclusions&quot;,&quot;*.js,*.css,&#x2F;druid&#x2F;*&quot;);\n\n        bean.setInitParameters(initParams);\n\n        bean.setUrlPatterns(Arrays.asList(&quot;&#x2F;*&quot;));\n\n        return  bean;\n    &#125;\n&#125;\n</code></pre>\n\n<h2 id=\"3、整合MyBatis\"><a href=\"#3、整合MyBatis\" class=\"headerlink\" title=\"3、整合MyBatis\"></a>3、整合MyBatis</h2><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n\t&lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;\n\t&lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;\n\t&lt;version&gt;1.3.1&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p><img src=\"/post/springboot/20180305194443.png\"></p>\n<p>步骤：</p>\n<p>​\t1）、配置数据源相关属性（见上一节Druid）</p>\n<p>​\t2）、给数据库建表</p>\n<p>​\t3）、创建JavaBean</p>\n<h3 id=\"4）、注解版\"><a href=\"#4）、注解版\" class=\"headerlink\" title=\"4）、注解版\"></a>4）、注解版</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;指定这是一个操作数据库的mapper\n@Mapper\npublic interface DepartmentMapper &#123;\n\n    @Select(&quot;select * from department where id&#x3D;#&#123;id&#125;&quot;)\n    public Department getDeptById(Integer id);\n\n    @Delete(&quot;delete from department where id&#x3D;#&#123;id&#125;&quot;)\n    public int deleteDeptById(Integer id);\n\n    @Options(useGeneratedKeys &#x3D; true,keyProperty &#x3D; &quot;id&quot;)\n    @Insert(&quot;insert into department(departmentName) values(#&#123;departmentName&#125;)&quot;)\n    public int insertDept(Department department);\n\n    @Update(&quot;update department set departmentName&#x3D;#&#123;departmentName&#125; where id&#x3D;#&#123;id&#125;&quot;)\n    public int updateDept(Department department);\n&#125;</code></pre>\n\n<p>问题：</p>\n<p>自定义MyBatis的配置规则；给容器中添加一个ConfigurationCustomizer；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@org.springframework.context.annotation.Configuration\npublic class MyBatisConfig &#123;\n\n    @Bean\n    public ConfigurationCustomizer configurationCustomizer()&#123;\n        return new ConfigurationCustomizer()&#123;\n\n            @Override\n            public void customize(Configuration configuration) &#123;\n                configuration.setMapUnderscoreToCamelCase(true);\n            &#125;\n        &#125;;\n    &#125;\n&#125;</code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">使用MapperScan批量扫描所有的Mapper接口；\n@MapperScan(value &#x3D; &quot;com.atguigu.springboot.mapper&quot;)\n@SpringBootApplication\npublic class SpringBoot06DataMybatisApplication &#123;\n\n\tpublic static void main(String[] args) &#123;\n\t\tSpringApplication.run(SpringBoot06DataMybatisApplication.class, args);\n\t&#125;\n&#125;</code></pre>\n\n<h3 id=\"5）、配置文件版\"><a href=\"#5）、配置文件版\" class=\"headerlink\" title=\"5）、配置文件版\"></a>5）、配置文件版</h3><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">mybatis:\n  config-location: classpath:mybatis&#x2F;mybatis-config.xml 指定全局配置文件的位置\n  mapper-locations: classpath:mybatis&#x2F;mapper&#x2F;*.xml  指定sql映射文件的位置</code></pre>\n\n<p>更多使用参照</p>\n<p><a href=\"http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/\">http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/</a></p>\n<h2 id=\"4、整合SpringData-JPA\"><a href=\"#4、整合SpringData-JPA\" class=\"headerlink\" title=\"4、整合SpringData JPA\"></a>4、整合SpringData JPA</h2><h3 id=\"1）、SpringData简介\"><a href=\"#1）、SpringData简介\" class=\"headerlink\" title=\"1）、SpringData简介\"></a>1）、SpringData简介</h3><p><img src=\"/post/springboot/20180306105412.png\"></p>\n<h3 id=\"2）、整合SpringData-JPA\"><a href=\"#2）、整合SpringData-JPA\" class=\"headerlink\" title=\"2）、整合SpringData JPA\"></a>2）、整合SpringData JPA</h3><p>JPA:ORM（Object Relational Mapping）；</p>\n<p>1）、编写一个实体类（bean）和数据表进行映射，并且配置好映射关系；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;使用JPA注解配置映射关系\n@Entity &#x2F;&#x2F;告诉JPA这是一个实体类（和数据表映射的类）\n@Table(name &#x3D; &quot;tbl_user&quot;) &#x2F;&#x2F;@Table来指定和哪个数据表对应;如果省略默认表名就是user；\npublic class User &#123;\n\n    @Id &#x2F;&#x2F;这是一个主键\n    @GeneratedValue(strategy &#x3D; GenerationType.IDENTITY)&#x2F;&#x2F;自增主键\n    private Integer id;\n\n    @Column(name &#x3D; &quot;last_name&quot;,length &#x3D; 50) &#x2F;&#x2F;这是和数据表对应的一个列\n    private String lastName;\n    @Column &#x2F;&#x2F;省略默认列名就是属性名\n    private String email;</code></pre>\n\n<p>2）、编写一个Dao接口来操作实体类对应的数据表（Repository）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;继承JpaRepository来完成对数据库的操作\npublic interface UserRepository extends JpaRepository&lt;User,Integer&gt; &#123;\n&#125;\n</code></pre>\n\n<p>3）、基本的配置JpaProperties</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:  \n jpa:\n    hibernate:\n#     更新或者创建数据表结构\n      ddl-auto: update\n#    控制台显示SQL\n    show-sql: true</code></pre>\n\n\n\n<h1 id=\"七、启动配置原理\"><a href=\"#七、启动配置原理\" class=\"headerlink\" title=\"七、启动配置原理\"></a>七、启动配置原理</h1><p>几个重要的事件回调机制</p>\n<p>配置在META-INF&#x2F;spring.factories</p>\n<p><strong>ApplicationContextInitializer</strong></p>\n<p><strong>SpringApplicationRunListener</strong></p>\n<p>只需要放在ioc容器中</p>\n<p><strong>ApplicationRunner</strong></p>\n<p><strong>CommandLineRunner</strong></p>\n<p>启动流程：</p>\n<h2 id=\"1、创建SpringApplication对象\"><a href=\"#1、创建SpringApplication对象\" class=\"headerlink\" title=\"1、创建SpringApplication对象\"></a><strong>1、创建SpringApplication对象</strong></h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">initialize(sources);\nprivate void initialize(Object[] sources) &#123;\n    &#x2F;&#x2F;保存主配置类\n    if (sources !&#x3D; null &amp;&amp; sources.length &gt; 0) &#123;\n        this.sources.addAll(Arrays.asList(sources));\n    &#125;\n    &#x2F;&#x2F;判断当前是否一个web应用\n    this.webEnvironment &#x3D; deduceWebEnvironment();\n    &#x2F;&#x2F;从类路径下找到META-INF&#x2F;spring.factories配置的所有ApplicationContextInitializer；然后保存起来\n    setInitializers((Collection) getSpringFactoriesInstances(\n        ApplicationContextInitializer.class));\n    &#x2F;&#x2F;从类路径下找到ETA-INF&#x2F;spring.factories配置的所有ApplicationListener\n    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));\n    &#x2F;&#x2F;从多个配置类中找到有main方法的主配置类\n    this.mainApplicationClass &#x3D; deduceMainApplicationClass();\n&#125;</code></pre>\n\n<p><img src=\"/post/springboot/20180306145727.png\"></p>\n<p><img src=\"/post/springboot/20180306145855.png\"></p>\n<h2 id=\"2、运行run方法\"><a href=\"#2、运行run方法\" class=\"headerlink\" title=\"2、运行run方法\"></a>2、运行run方法</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public ConfigurableApplicationContext run(String... args) &#123;\n   StopWatch stopWatch &#x3D; new StopWatch();\n   stopWatch.start();\n   ConfigurableApplicationContext context &#x3D; null;\n   FailureAnalyzers analyzers &#x3D; null;\n   configureHeadlessProperty();\n    \n   &#x2F;&#x2F;获取SpringApplicationRunListeners；从类路径下META-INF&#x2F;spring.factories\n   SpringApplicationRunListeners listeners &#x3D; getRunListeners(args);\n    &#x2F;&#x2F;回调所有的获取SpringApplicationRunListener.starting()方法\n   listeners.starting();\n   try &#123;\n       &#x2F;&#x2F;封装命令行参数\n      ApplicationArguments applicationArguments &#x3D; new DefaultApplicationArguments(\n            args);\n      &#x2F;&#x2F;准备环境\n      ConfigurableEnvironment environment &#x3D; prepareEnvironment(listeners,\n            applicationArguments);\n       \t\t&#x2F;&#x2F;创建环境完成后回调SpringApplicationRunListener.environmentPrepared()；表示环境准备完成\n       \n      Banner printedBanner &#x3D; printBanner(environment);\n       \n       &#x2F;&#x2F;创建ApplicationContext；决定创建web的ioc还是普通的ioc\n      context &#x3D; createApplicationContext();\n       \n      analyzers &#x3D; new FailureAnalyzers(context);\n       &#x2F;&#x2F;准备上下文环境;将environment保存到ioc中；而且applyInitializers()；\n       &#x2F;&#x2F;applyInitializers()：回调之前保存的所有的ApplicationContextInitializer的initialize方法\n       &#x2F;&#x2F;回调所有的SpringApplicationRunListener的contextPrepared()；\n       &#x2F;&#x2F;\n      prepareContext(context, environment, listeners, applicationArguments,\n            printedBanner);\n       &#x2F;&#x2F;prepareContext运行完成以后回调所有的SpringApplicationRunListener的contextLoaded（）；\n       \n       &#x2F;&#x2F;s刷新容器；ioc容器初始化（如果是web应用还会创建嵌入式的Tomcat）；Spring注解版\n       &#x2F;&#x2F;扫描，创建，加载所有组件的地方；（配置类，组件，自动配置）\n      refreshContext(context);\n       &#x2F;&#x2F;从ioc容器中获取所有的ApplicationRunner和CommandLineRunner进行回调\n       &#x2F;&#x2F;ApplicationRunner先回调，CommandLineRunner再回调\n      afterRefresh(context, applicationArguments);\n       &#x2F;&#x2F;所有的SpringApplicationRunListener回调finished方法\n      listeners.finished(context, null);\n      stopWatch.stop();\n      if (this.logStartupInfo) &#123;\n         new StartupInfoLogger(this.mainApplicationClass)\n               .logStarted(getApplicationLog(), stopWatch);\n      &#125;\n       &#x2F;&#x2F;整个SpringBoot应用启动完成以后返回启动的ioc容器；\n      return context;\n   &#125;\n   catch (Throwable ex) &#123;\n      handleRunFailure(context, listeners, analyzers, ex);\n      throw new IllegalStateException(ex);\n   &#125;\n&#125;</code></pre>\n\n<h2 id=\"3、事件监听机制\"><a href=\"#3、事件监听机制\" class=\"headerlink\" title=\"3、事件监听机制\"></a>3、事件监听机制</h2><p>配置在META-INF&#x2F;spring.factories</p>\n<p><strong>ApplicationContextInitializer</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class HelloApplicationContextInitializer implements ApplicationContextInitializer&lt;ConfigurableApplicationContext&gt; &#123;\n    @Override\n    public void initialize(ConfigurableApplicationContext applicationContext) &#123;\n        System.out.println(&quot;ApplicationContextInitializer...initialize...&quot;+applicationContext);\n    &#125;\n&#125;\n</code></pre>\n\n<p><strong>SpringApplicationRunListener</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class HelloSpringApplicationRunListener implements SpringApplicationRunListener &#123;\n\n    &#x2F;&#x2F;必须有的构造器\n    public HelloSpringApplicationRunListener(SpringApplication application, String[] args)&#123;\n\n    &#125;\n\n    @Override\n    public void starting() &#123;\n        System.out.println(&quot;SpringApplicationRunListener...starting...&quot;);\n    &#125;\n\n    @Override\n    public void environmentPrepared(ConfigurableEnvironment environment) &#123;\n        Object o &#x3D; environment.getSystemProperties().get(&quot;os.name&quot;);\n        System.out.println(&quot;SpringApplicationRunListener...environmentPrepared..&quot;+o);\n    &#125;\n\n    @Override\n    public void contextPrepared(ConfigurableApplicationContext context) &#123;\n        System.out.println(&quot;SpringApplicationRunListener...contextPrepared...&quot;);\n    &#125;\n\n    @Override\n    public void contextLoaded(ConfigurableApplicationContext context) &#123;\n        System.out.println(&quot;SpringApplicationRunListener...contextLoaded...&quot;);\n    &#125;\n\n    @Override\n    public void finished(ConfigurableApplicationContext context, Throwable exception) &#123;\n        System.out.println(&quot;SpringApplicationRunListener...finished...&quot;);\n    &#125;\n&#125;\n</code></pre>\n\n<p>配置（META-INF&#x2F;spring.factories）</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\">org.springframework.context.ApplicationContextInitializer&#x3D;\\\ncom.atguigu.springboot.listener.HelloApplicationContextInitializer\n\norg.springframework.boot.SpringApplicationRunListener&#x3D;\\\ncom.atguigu.springboot.listener.HelloSpringApplicationRunListener</code></pre>\n\n\n\n\n\n<p>只需要放在ioc容器中</p>\n<p><strong>ApplicationRunner</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Component\npublic class HelloApplicationRunner implements ApplicationRunner &#123;\n    @Override\n    public void run(ApplicationArguments args) throws Exception &#123;\n        System.out.println(&quot;ApplicationRunner...run....&quot;);\n    &#125;\n&#125;</code></pre>\n\n\n\n<p><strong>CommandLineRunner</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Component\npublic class HelloCommandLineRunner implements CommandLineRunner &#123;\n    @Override\n    public void run(String... args) throws Exception &#123;\n        System.out.println(&quot;CommandLineRunner...run...&quot;+ Arrays.asList(args));\n    &#125;\n&#125;</code></pre>\n\n\n\n<h1 id=\"八、自定义starter\"><a href=\"#八、自定义starter\" class=\"headerlink\" title=\"八、自定义starter\"></a>八、自定义starter</h1><p>starter：</p>\n<p>​\t1、这个场景需要使用到的依赖是什么？</p>\n<p>​\t2、如何编写自动配置</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration  &#x2F;&#x2F;指定这个类是一个配置类\n@ConditionalOnXXX  &#x2F;&#x2F;在指定条件成立的情况下自动配置类生效\n@AutoConfigureAfter  &#x2F;&#x2F;指定自动配置类的顺序\n@Bean  &#x2F;&#x2F;给容器中添加组件\n\n@ConfigurationPropertie结合相关xxxProperties类来绑定相关的配置\n@EnableConfigurationProperties &#x2F;&#x2F;让xxxProperties生效加入到容器中\n\n自动配置类要能加载\n将需要启动就加载的自动配置类，配置在META-INF&#x2F;spring.factories\norg.springframework.boot.autoconfigure.EnableAutoConfiguration&#x3D;\\\norg.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\</code></pre>\n\n<p>​\t3、模式：</p>\n<p>启动器只用来做依赖导入；</p>\n<p>专门来写一个自动配置模块；</p>\n<p>启动器依赖自动配置；别人只需要引入启动器（starter）</p>\n<p>mybatis-spring-boot-starter；自定义启动器名-spring-boot-starter</p>\n<p>步骤：</p>\n<p>1）、启动器模块</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;\n         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;\n    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;\n\n    &lt;groupId&gt;com.atguigu.starter&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;atguigu-spring-boot-starter&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;\n\n    &lt;!--启动器--&gt;\n    &lt;dependencies&gt;\n\n        &lt;!--引入自动配置模块--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.atguigu.starter&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;atguigu-spring-boot-starter-autoconfigurer&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;\n        &lt;&#x2F;dependency&gt;\n    &lt;&#x2F;dependencies&gt;\n\n&lt;&#x2F;project&gt;</code></pre>\n\n<p>2）、自动配置模块</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n   xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;\n   &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;\n\n   &lt;groupId&gt;com.atguigu.starter&lt;&#x2F;groupId&gt;\n   &lt;artifactId&gt;atguigu-spring-boot-starter-autoconfigurer&lt;&#x2F;artifactId&gt;\n   &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;\n   &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;\n\n   &lt;name&gt;atguigu-spring-boot-starter-autoconfigurer&lt;&#x2F;name&gt;\n   &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;\n\n   &lt;parent&gt;\n      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n      &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;\n      &lt;version&gt;1.5.10.RELEASE&lt;&#x2F;version&gt;\n      &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;\n   &lt;&#x2F;parent&gt;\n\n   &lt;properties&gt;\n      &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;\n      &lt;project.reporting.outputEncoding&gt;UTF-8&lt;&#x2F;project.reporting.outputEncoding&gt;\n      &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;\n   &lt;&#x2F;properties&gt;\n\n   &lt;dependencies&gt;\n\n      &lt;!--引入spring-boot-starter；所有starter的基本配置--&gt;\n      &lt;dependency&gt;\n         &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n         &lt;artifactId&gt;spring-boot-starter&lt;&#x2F;artifactId&gt;\n      &lt;&#x2F;dependency&gt;\n\n   &lt;&#x2F;dependencies&gt;\n\n\n\n&lt;&#x2F;project&gt;\n</code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.atguigu.starter;\n\nimport org.springframework.boot.context.properties.ConfigurationProperties;\n\n@ConfigurationProperties(prefix &#x3D; &quot;atguigu.hello&quot;)\npublic class HelloProperties &#123;\n\n    private String prefix;\n    private String suffix;\n\n    public String getPrefix() &#123;\n        return prefix;\n    &#125;\n\n    public void setPrefix(String prefix) &#123;\n        this.prefix &#x3D; prefix;\n    &#125;\n\n    public String getSuffix() &#123;\n        return suffix;\n    &#125;\n\n    public void setSuffix(String suffix) &#123;\n        this.suffix &#x3D; suffix;\n    &#125;\n&#125;\n</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.atguigu.starter;\n\npublic class HelloService &#123;\n\n    HelloProperties helloProperties;\n\n    public HelloProperties getHelloProperties() &#123;\n        return helloProperties;\n    &#125;\n\n    public void setHelloProperties(HelloProperties helloProperties) &#123;\n        this.helloProperties &#x3D; helloProperties;\n    &#125;\n\n    public String sayHellAtguigu(String name)&#123;\n        return helloProperties.getPrefix()+&quot;-&quot; +name + helloProperties.getSuffix();\n    &#125;\n&#125;\n</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.atguigu.starter;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\n@ConditionalOnWebApplication &#x2F;&#x2F;web应用才生效\n@EnableConfigurationProperties(HelloProperties.class)\npublic class HelloServiceAutoConfiguration &#123;\n\n    @Autowired\n    HelloProperties helloProperties;\n    @Bean\n    public HelloService helloService()&#123;\n        HelloService service &#x3D; new HelloService();\n        service.setHelloProperties(helloProperties);\n        return service;\n    &#125;\n&#125;\n</code></pre>\n\n<h1 id=\"更多SpringBoot整合示例\"><a href=\"#更多SpringBoot整合示例\" class=\"headerlink\" title=\"更多SpringBoot整合示例\"></a>更多SpringBoot整合示例</h1><p><a href=\"https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples\">https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples</a></p>\n","text":"Spring Boot 1、Spring Boot 简介 简化Spring应用开发的一个框架； 整个Spring技术栈的一个大整合； J2EE开发的一站式解决方案； 2、微服务2014，martin fowler 微服务：架构风格（服务微化） 一个应用应该是一组小型服务；可以通过...","link":"","photos":[],"count_time":{"symbolsCount":"118k","symbolsTime":"1:47"},"categories":[{"name":"java","slug":"java","count":3,"path":"api/categories/java.json"}],"tags":[{"name":"Spring","slug":"Spring","count":2,"path":"api/tags/Spring.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\">Spring Boot</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81Spring-Boot-%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">1、Spring Boot 简介</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">2、微服务</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87\"><span class=\"toc-text\">3、环境准备</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81MAVEN%E8%AE%BE%E7%BD%AE%EF%BC%9B\"><span class=\"toc-text\">1、MAVEN设置；</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81IDEA%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">2、IDEA设置</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81Spring-Boot-HelloWorld\"><span class=\"toc-text\">4、Spring Boot HelloWorld</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAmaven%E5%B7%A5%E7%A8%8B%EF%BC%9B%EF%BC%88jar%EF%BC%89\"><span class=\"toc-text\">1、创建一个maven工程；（jar）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%AF%BC%E5%85%A5spring-boot%E7%9B%B8%E5%85%B3%E7%9A%84%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">2、导入spring boot相关的依赖</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E4%B8%BB%E7%A8%8B%E5%BA%8F%EF%BC%9B%E5%90%AF%E5%8A%A8Spring-Boot%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">3、编写一个主程序；启动Spring Boot应用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81%E7%BC%96%E5%86%99%E7%9B%B8%E5%85%B3%E7%9A%84Controller%E3%80%81Service\"><span class=\"toc-text\">4、编写相关的Controller、Service</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5%E3%80%81%E8%BF%90%E8%A1%8C%E4%B8%BB%E7%A8%8B%E5%BA%8F%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">5、运行主程序测试</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6%E3%80%81%E7%AE%80%E5%8C%96%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">6、简化部署</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5%E3%80%81Hello-World%E6%8E%A2%E7%A9%B6\"><span class=\"toc-text\">5、Hello World探究</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81POM%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">1、POM文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E7%88%B6%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">1、父项目</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%90%AF%E5%8A%A8%E5%99%A8\"><span class=\"toc-text\">2、启动器</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E4%B8%BB%E7%A8%8B%E5%BA%8F%E7%B1%BB%EF%BC%8C%E4%B8%BB%E5%85%A5%E5%8F%A3%E7%B1%BB\"><span class=\"toc-text\">2、主程序类，主入口类</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6%E3%80%81%E4%BD%BF%E7%94%A8Spring-Initializer%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BASpring-Boot%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">6、使用Spring Initializer快速创建Spring Boot项目</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81IDEA%EF%BC%9A%E4%BD%BF%E7%94%A8-Spring-Initializer%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">1、IDEA：使用 Spring Initializer快速创建项目</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81STS%E4%BD%BF%E7%94%A8-Spring-Starter-Project%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">2、STS使用 Spring Starter Project快速创建项目</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">二、配置文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">1、配置文件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81YAML%E8%AF%AD%E6%B3%95%EF%BC%9A\"><span class=\"toc-text\">2、YAML语法：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">1、基本语法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%80%BC%E7%9A%84%E5%86%99%E6%B3%95\"><span class=\"toc-text\">2、值的写法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AD%97%E9%9D%A2%E9%87%8F%EF%BC%9A%E6%99%AE%E9%80%9A%E7%9A%84%E5%80%BC%EF%BC%88%E6%95%B0%E5%AD%97%EF%BC%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%8C%E5%B8%83%E5%B0%94%EF%BC%89\"><span class=\"toc-text\">字面量：普通的值（数字，字符串，布尔）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1%E3%80%81Map%EF%BC%88%E5%B1%9E%E6%80%A7%E5%92%8C%E5%80%BC%EF%BC%89%EF%BC%88%E9%94%AE%E5%80%BC%E5%AF%B9%EF%BC%89%EF%BC%9A\"><span class=\"toc-text\">对象、Map（属性和值）（键值对）：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%EF%BC%88List%E3%80%81Set%EF%BC%89%EF%BC%9A\"><span class=\"toc-text\">数组（List、Set）：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%80%BC%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">3、配置文件值注入</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81properties%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%9C%A8idea%E4%B8%AD%E9%BB%98%E8%AE%A4utf-8%E5%8F%AF%E8%83%BD%E4%BC%9A%E4%B9%B1%E7%A0%81\"><span class=\"toc-text\">1、properties配置文件在idea中默认utf-8可能会乱码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81-Value%E8%8E%B7%E5%8F%96%E5%80%BC%E5%92%8C-ConfigurationProperties%E8%8E%B7%E5%8F%96%E5%80%BC%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">2、@Value获取值和@ConfigurationProperties获取值比较</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%B3%A8%E5%85%A5%E5%80%BC%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C\"><span class=\"toc-text\">3、配置文件注入值数据校验</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4%E3%80%81-PropertySource-amp-ImportResource-amp-Bean\"><span class=\"toc-text\">4、@PropertySource&amp;@ImportResource&amp;@Bean</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E9%9A%8F%E6%9C%BA%E6%95%B0\"><span class=\"toc-text\">1、随机数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%8D%A0%E4%BD%8D%E7%AC%A6%E8%8E%B7%E5%8F%96%E4%B9%8B%E5%89%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E5%80%BC%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%B2%A1%E6%9C%89%E5%8F%AF%E4%BB%A5%E6%98%AF%E7%94%A8-%E6%8C%87%E5%AE%9A%E9%BB%98%E8%AE%A4%E5%80%BC\"><span class=\"toc-text\">2、占位符获取之前配置的值，如果没有可以是用:指定默认值</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5%E3%80%81Profile\"><span class=\"toc-text\">5、Profile</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%A4%9AProfile%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">1、多Profile文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81yml%E6%94%AF%E6%8C%81%E5%A4%9A%E6%96%87%E6%A1%A3%E5%9D%97%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">2、yml支持多文档块方式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E6%BF%80%E6%B4%BB%E6%8C%87%E5%AE%9Aprofile\"><span class=\"toc-text\">3、激活指定profile</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6%E3%80%81%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E4%BD%8D%E7%BD%AE\"><span class=\"toc-text\">6、配置文件加载位置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7%E3%80%81%E5%A4%96%E9%83%A8%E9%85%8D%E7%BD%AE%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">7、外部配置加载顺序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8%E3%80%81%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">8、自动配置原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86%EF%BC%9A\"><span class=\"toc-text\">1、自动配置原理：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E7%BB%86%E8%8A%82\"><span class=\"toc-text\">2、细节</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81-Conditional%E6%B4%BE%E7%94%9F%E6%B3%A8%E8%A7%A3%EF%BC%88Spring%E6%B3%A8%E8%A7%A3%E7%89%88%E5%8E%9F%E7%94%9F%E7%9A%84-Conditional%E4%BD%9C%E7%94%A8%EF%BC%89\"><span class=\"toc-text\">1、@Conditional派生注解（Spring注解版原生的@Conditional作用）</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E6%97%A5%E5%BF%97\"><span class=\"toc-text\">三、日志</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">1、日志框架</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81SLF4j%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">2、SLF4j使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%A6%82%E4%BD%95%E5%9C%A8%E7%B3%BB%E7%BB%9F%E4%B8%AD%E4%BD%BF%E7%94%A8SLF4j-https-www-slf4j-org\"><span class=\"toc-text\">1、如何在系统中使用SLF4j   https:&#x2F;&#x2F;www.slf4j.org</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E9%81%97%E7%95%99%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">2、遗留问题</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81SpringBoot%E6%97%A5%E5%BF%97%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">3、SpringBoot日志关系</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81%E6%97%A5%E5%BF%97%E4%BD%BF%E7%94%A8%EF%BC%9B\"><span class=\"toc-text\">4、日志使用；</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">1、默认配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%8C%87%E5%AE%9A%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">2、指定配置</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5%E3%80%81%E5%88%87%E6%8D%A2%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">5、切换日志框架</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81Web%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">四、Web开发</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">1、简介</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81SpringBoot%E5%AF%B9%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E7%9A%84%E6%98%A0%E5%B0%84%E8%A7%84%E5%88%99%EF%BC%9B\"><span class=\"toc-text\">2、SpringBoot对静态资源的映射规则；</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E\"><span class=\"toc-text\">3、模板引擎</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%BC%95%E5%85%A5thymeleaf%EF%BC%9B\"><span class=\"toc-text\">1、引入thymeleaf；</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81Thymeleaf%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">2、Thymeleaf使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E8%AF%AD%E6%B3%95%E8%A7%84%E5%88%99\"><span class=\"toc-text\">3、语法规则</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81SpringMVC%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">4、SpringMVC自动配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-Spring-MVC-auto-configuration\"><span class=\"toc-text\">1. Spring MVC auto-configuration</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%89%A9%E5%B1%95SpringMVC\"><span class=\"toc-text\">2、扩展SpringMVC</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%85%A8%E9%9D%A2%E6%8E%A5%E7%AE%A1SpringMVC%EF%BC%9B\"><span class=\"toc-text\">3、全面接管SpringMVC；</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5%E3%80%81%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9SpringBoot%E7%9A%84%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">5、如何修改SpringBoot的默认配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6%E3%80%81RestfulCRUD\"><span class=\"toc-text\">6、RestfulCRUD</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%EF%BC%89%E3%80%81%E9%BB%98%E8%AE%A4%E8%AE%BF%E9%97%AE%E9%A6%96%E9%A1%B5\"><span class=\"toc-text\">1）、默认访问首页</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%EF%BC%89%E3%80%81%E5%9B%BD%E9%99%85%E5%8C%96\"><span class=\"toc-text\">2）、国际化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%EF%BC%89%E3%80%81%E7%99%BB%E9%99%86\"><span class=\"toc-text\">3）、登陆</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%EF%BC%89%E3%80%81%E6%8B%A6%E6%88%AA%E5%99%A8%E8%BF%9B%E8%A1%8C%E7%99%BB%E9%99%86%E6%A3%80%E6%9F%A5\"><span class=\"toc-text\">4）、拦截器进行登陆检查</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5%EF%BC%89%E3%80%81CRUD-%E5%91%98%E5%B7%A5%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">5）、CRUD-员工列表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#thymeleaf%E5%85%AC%E5%85%B1%E9%A1%B5%E9%9D%A2%E5%85%83%E7%B4%A0%E6%8A%BD%E5%8F%96\"><span class=\"toc-text\">thymeleaf公共页面元素抽取</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6%EF%BC%89%E3%80%81CRUD-%E5%91%98%E5%B7%A5%E6%B7%BB%E5%8A%A0\"><span class=\"toc-text\">6）、CRUD-员工添加</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7%EF%BC%89%E3%80%81CRUD-%E5%91%98%E5%B7%A5%E4%BF%AE%E6%94%B9\"><span class=\"toc-text\">7）、CRUD-员工修改</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8%EF%BC%89%E3%80%81CRUD-%E5%91%98%E5%B7%A5%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">8）、CRUD-员工删除</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7%E3%80%81%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">7、错误处理机制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%EF%BC%89%E3%80%81SpringBoot%E9%BB%98%E8%AE%A4%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">1）、SpringBoot默认的错误处理机制</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%EF%BC%89%E3%80%81%E5%A6%82%E6%9E%9C%E5%AE%9A%E5%88%B6%E9%94%99%E8%AF%AF%E5%93%8D%E5%BA%94%EF%BC%9A\"><span class=\"toc-text\">2）、如果定制错误响应：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%EF%BC%89%E3%80%81%E5%A6%82%E4%BD%95%E5%AE%9A%E5%88%B6%E9%94%99%E8%AF%AF%E7%9A%84%E9%A1%B5%E9%9D%A2%EF%BC%9B\"><span class=\"toc-text\">1）、如何定制错误的页面；</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%EF%BC%89%E3%80%81%E5%A6%82%E4%BD%95%E5%AE%9A%E5%88%B6%E9%94%99%E8%AF%AF%E7%9A%84json%E6%95%B0%E6%8D%AE%EF%BC%9B\"><span class=\"toc-text\">2）、如何定制错误的json数据；</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%EF%BC%89%E3%80%81%E5%B0%86%E6%88%91%E4%BB%AC%E7%9A%84%E5%AE%9A%E5%88%B6%E6%95%B0%E6%8D%AE%E6%90%BA%E5%B8%A6%E5%87%BA%E5%8E%BB%EF%BC%9B\"><span class=\"toc-text\">3）、将我们的定制数据携带出去；</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8%E3%80%81%E9%85%8D%E7%BD%AE%E5%B5%8C%E5%85%A5%E5%BC%8FServlet%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">8、配置嵌入式Servlet容器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%EF%BC%89%E3%80%81%E5%A6%82%E4%BD%95%E5%AE%9A%E5%88%B6%E5%92%8C%E4%BF%AE%E6%94%B9Servlet%E5%AE%B9%E5%99%A8%E7%9A%84%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%EF%BC%9B\"><span class=\"toc-text\">1）、如何定制和修改Servlet容器的相关配置；</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%EF%BC%89%E3%80%81%E6%B3%A8%E5%86%8CServlet%E4%B8%89%E5%A4%A7%E7%BB%84%E4%BB%B6%E3%80%90Servlet%E3%80%81Filter%E3%80%81Listener%E3%80%91\"><span class=\"toc-text\">2）、注册Servlet三大组件【Servlet、Filter、Listener】</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%EF%BC%89%E3%80%81%E6%9B%BF%E6%8D%A2%E4%B8%BA%E5%85%B6%E4%BB%96%E5%B5%8C%E5%85%A5%E5%BC%8FServlet%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">3）、替换为其他嵌入式Servlet容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%EF%BC%89%E3%80%81%E5%B5%8C%E5%85%A5%E5%BC%8FServlet%E5%AE%B9%E5%99%A8%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86%EF%BC%9B\"><span class=\"toc-text\">4）、嵌入式Servlet容器自动配置原理；</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9%E3%80%81%E4%BD%BF%E7%94%A8%E5%A4%96%E7%BD%AE%E7%9A%84Servlet%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">9、使用外置的Servlet容器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">步骤</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">原理</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81Docker\"><span class=\"toc-text\">五、Docker</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E7%AE%80%E4%BB%8B-1\"><span class=\"toc-text\">1、简介</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">2、核心概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%AE%89%E8%A3%85Docker\"><span class=\"toc-text\">3、安装Docker</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%EF%BC%89%E3%80%81%E5%AE%89%E8%A3%85linux%E8%99%9A%E6%8B%9F%E6%9C%BA\"><span class=\"toc-text\">1）、安装linux虚拟机</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%EF%BC%89%E3%80%81%E5%9C%A8linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8A%E5%AE%89%E8%A3%85docker\"><span class=\"toc-text\">2）、在linux虚拟机上安装docker</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-amp-%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">4、Docker常用命令&amp;操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%EF%BC%89%E3%80%81%E9%95%9C%E5%83%8F%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">1）、镜像操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%EF%BC%89%E3%80%81%E5%AE%B9%E5%99%A8%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">2）、容器操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%EF%BC%89%E3%80%81%E5%AE%89%E8%A3%85MySQL%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">3）、安装MySQL示例</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%AD%E3%80%81SpringBoot%E4%B8%8E%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">六、SpringBoot与数据访问</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81JDBC\"><span class=\"toc-text\">1、JDBC</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%95%B4%E5%90%88Druid%E6%95%B0%E6%8D%AE%E6%BA%90\"><span class=\"toc-text\">2、整合Druid数据源</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81%E6%95%B4%E5%90%88MyBatis\"><span class=\"toc-text\">3、整合MyBatis</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%EF%BC%89%E3%80%81%E6%B3%A8%E8%A7%A3%E7%89%88\"><span class=\"toc-text\">4）、注解版</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5%EF%BC%89%E3%80%81%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%89%88\"><span class=\"toc-text\">5）、配置文件版</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81%E6%95%B4%E5%90%88SpringData-JPA\"><span class=\"toc-text\">4、整合SpringData JPA</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%EF%BC%89%E3%80%81SpringData%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">1）、SpringData简介</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%EF%BC%89%E3%80%81%E6%95%B4%E5%90%88SpringData-JPA\"><span class=\"toc-text\">2）、整合SpringData JPA</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%83%E3%80%81%E5%90%AF%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">七、启动配置原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%88%9B%E5%BB%BASpringApplication%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">1、创建SpringApplication对象</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E8%BF%90%E8%A1%8Crun%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">2、运行run方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">3、事件监听机制</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%AB%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89starter\"><span class=\"toc-text\">八、自定义starter</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9B%B4%E5%A4%9ASpringBoot%E6%95%B4%E5%90%88%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">更多SpringBoot整合示例</span></a></li></ol>","author":{"name":"云の博客","slug":"blog-author","avatar":"/images/headImg.jpg","link":"/","description":"逆水行舟，不进则退","socials":{"github":"https://github.com/wangwengang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/6235839578","zhihu":"https://www.zhihu.com/people/wang-wen-gang-88","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/bilibili.png","link":"https://space.bilibili.com/300075036?spm_id_from=333.1007.0.0"},"yuque":{"icon":"/images/yuque.png","link":"https://www.yuque.com/dashboard"},"youdaoyun":{"icon":"/images/youdaoyun.png","link":"https://note.youdao.com/web/#/file/recent/markdown/4B759CCEDB274B9B80BDAE364F584C9F/"},"email":{"icon":"/images/qq.png","link":"https://mail.qq.com/cgi-bin/frame_html?sid=7tWo2bVJUQoIWRJ2&r=fcc05bd806b6e9cb755f4c2f3c41763d&lang=zh"},"163邮箱":{"icon":"/images/163.png","link":"https://mail.163.com/js6/main.jsp?sid=XDgrOFUiTMnRnvpgWmiiQvyDkcaqoolS&df=email163#module=welcome.WelcomeModule%7C%7B%7D"}}}},"mapped":true,"prev_post":{"title":"Docker","uid":"a48e6dda0c21e40880cba7e763278b04","slug":"docker","date":"2019-01-11T02:59:39.000Z","updated":"2023-03-04T14:51:24.693Z","comments":true,"path":"api/articles/docker.json","keywords":null,"cover":[],"text":"Docker的安装与使用 Docker安装安装链接：链接1&amp;emsp;链接2Docker_阿里云镜像加速配置 打开阿里云容器镜像服务：https://cr.console.aliyun.com/cn-hangzhou/mirrors vim &#x2F;etc&#x2F;...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"linux","slug":"linux","count":1,"path":"api/categories/linux.json"}],"tags":[{"name":"虚拟化","slug":"虚拟化","count":1,"path":"api/tags/虚拟化.json"}],"author":{"name":"云の博客","slug":"blog-author","avatar":"/images/headImg.jpg","link":"/","description":"逆水行舟，不进则退","socials":{"github":"https://github.com/wangwengang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/6235839578","zhihu":"https://www.zhihu.com/people/wang-wen-gang-88","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/bilibili.png","link":"https://space.bilibili.com/300075036?spm_id_from=333.1007.0.0"},"yuque":{"icon":"/images/yuque.png","link":"https://www.yuque.com/dashboard"},"youdaoyun":{"icon":"/images/youdaoyun.png","link":"https://note.youdao.com/web/#/file/recent/markdown/4B759CCEDB274B9B80BDAE364F584C9F/"},"email":{"icon":"/images/qq.png","link":"https://mail.qq.com/cgi-bin/frame_html?sid=7tWo2bVJUQoIWRJ2&r=fcc05bd806b6e9cb755f4c2f3c41763d&lang=zh"},"163邮箱":{"icon":"/images/163.png","link":"https://mail.163.com/js6/main.jsp?sid=XDgrOFUiTMnRnvpgWmiiQvyDkcaqoolS&df=email163#module=welcome.WelcomeModule%7C%7B%7D"}}}}},"next_post":{}}